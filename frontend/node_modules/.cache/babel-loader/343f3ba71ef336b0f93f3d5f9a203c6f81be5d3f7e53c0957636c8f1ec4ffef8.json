{"ast":null,"code":"// Validation utilities for form inputs\n\nexport class ValidationUtils {\n  // Name validation (for nombre and apellido)\n  static validateName(value, fieldName) {\n    if (!value || value.trim() === '') {\n      return {\n        isValid: false,\n        message: `${fieldName} es requerido`\n      };\n    }\n    const trimmedValue = value.trim();\n    if (trimmedValue.length < 2) {\n      return {\n        isValid: false,\n        message: `${fieldName} debe tener al menos 2 caracteres`\n      };\n    }\n    if (trimmedValue.length > 50) {\n      return {\n        isValid: false,\n        message: `${fieldName} no puede exceder 50 caracteres`\n      };\n    }\n    if (!/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$/.test(trimmedValue)) {\n      return {\n        isValid: false,\n        message: `${fieldName} solo puede contener letras y espacios`\n      };\n    }\n\n    // Check for excessive whitespace\n    if (/\\s{2,}/.test(trimmedValue)) {\n      return {\n        isValid: false,\n        message: `${fieldName} no puede contener espacios múltiples consecutivos`\n      };\n    }\n\n    // Check for suspicious patterns (basic XSS protection)\n    const suspiciousPatterns = [/<script/i, /javascript:/i, /on\\w+\\s*=/i, /<iframe/i, /eval\\(/i];\n    if (suspiciousPatterns.some(pattern => pattern.test(value))) {\n      return {\n        isValid: false,\n        message: `${fieldName} contiene caracteres no permitidos`\n      };\n    }\n    return {\n      isValid: true\n    };\n  }\n\n  // Phone number validation (Colombian format)\n  static validatePhoneNumber(value) {\n    if (!value || value.trim() === '') {\n      return {\n        isValid: false,\n        message: 'El número celular es requerido'\n      };\n    }\n    const cleanPhone = value.replace(/\\D/g, '');\n    if (cleanPhone.length !== 10) {\n      return {\n        isValid: false,\n        message: 'El número celular debe tener exactamente 10 dígitos'\n      };\n    }\n    if (!cleanPhone.startsWith('3')) {\n      return {\n        isValid: false,\n        message: 'El número celular debe comenzar con 3'\n      };\n    }\n    return {\n      isValid: true\n    };\n  }\n\n  // City validation\n  static validateCity(value) {\n    if (!value || value.trim() === '') {\n      return {\n        isValid: false,\n        message: 'La ciudad es requerida'\n      };\n    }\n    const trimmedValue = value.trim();\n    if (trimmedValue.length < 2) {\n      return {\n        isValid: false,\n        message: 'La ciudad debe tener al menos 2 caracteres'\n      };\n    }\n    if (trimmedValue.length > 50) {\n      return {\n        isValid: false,\n        message: 'La ciudad no puede exceder 50 caracteres'\n      };\n    }\n    if (!/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$/.test(trimmedValue)) {\n      return {\n        isValid: false,\n        message: 'La ciudad solo puede contener letras y espacios'\n      };\n    }\n\n    // Check for excessive whitespace\n    if (/\\s{2,}/.test(trimmedValue)) {\n      return {\n        isValid: false,\n        message: 'La ciudad no puede contener espacios múltiples consecutivos'\n      };\n    }\n    return {\n      isValid: true\n    };\n  }\n\n  // Course validation\n  static validateCourse(value) {\n    if (!value || value.trim() === '') {\n      return {\n        isValid: false,\n        message: 'Debe seleccionar un curso'\n      };\n    }\n    const validCourses = ['Sanación de las familias', 'Angelología'];\n    if (!validCourses.includes(value.trim())) {\n      return {\n        isValid: false,\n        message: 'Curso no válido'\n      };\n    }\n    return {\n      isValid: true\n    };\n  }\n\n  // Email validation\n  static validateEmail(value) {\n    if (!value || value.trim() === '') {\n      return {\n        isValid: false,\n        message: 'El correo electrónico es requerido'\n      };\n    }\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(value.trim())) {\n      return {\n        isValid: false,\n        message: 'Ingresa un correo electrónico válido'\n      };\n    }\n    return {\n      isValid: true\n    };\n  }\n\n  // Password validation\n  static validatePassword(value) {\n    if (!value || value.trim() === '') {\n      return {\n        isValid: false,\n        message: 'La contraseña es requerida'\n      };\n    }\n    return {\n      isValid: true\n    };\n  }\n\n  // Payment status validation\n  static validatePaymentStatus(value) {\n    if (!value || value.trim() === '') {\n      return {\n        isValid: false,\n        message: 'Debe seleccionar un estado de pago'\n      };\n    }\n    const validStatuses = ['pendiente', 'parcial', 'completo'];\n    if (!validStatuses.includes(value)) {\n      return {\n        isValid: false,\n        message: 'Estado de pago no válido'\n      };\n    }\n    return {\n      isValid: true\n    };\n  }\n\n  // Payment amount validation\n  static validatePaymentAmount(value) {\n    if (!value || value.trim() === '') {\n      return {\n        isValid: false,\n        message: 'La cantidad es requerida'\n      };\n    }\n    const amount = parseFloat(value);\n    if (isNaN(amount)) {\n      return {\n        isValid: false,\n        message: 'La cantidad debe ser un número válido'\n      };\n    }\n    if (amount < 0) {\n      return {\n        isValid: false,\n        message: 'La cantidad no puede ser negativa'\n      };\n    }\n    if (amount > 10000000) {\n      return {\n        isValid: false,\n        message: 'La cantidad no puede exceder $10,000,000'\n      };\n    }\n    return {\n      isValid: true\n    };\n  }\n\n  // Real-time input sanitization\n  static sanitizePhoneInput(value) {\n    // Only allow digits and limit to 10 characters\n    const digits = value.replace(/\\D/g, '');\n    return digits.slice(0, 10);\n  }\n  static sanitizeNameInput(value) {\n    // Allow letters, spaces, and accented characters, then replace multiple spaces with single space\n    return value.replace(/[^a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]/g, '').replace(/\\s+/g, ' ').slice(0, 50);\n  }\n\n  // Enhanced validation for edge cases\n  static validateFormData(data) {\n    const errors = {};\n\n    // Check for null/undefined values\n    Object.keys(data).forEach(key => {\n      if (data[key] === null || data[key] === undefined) {\n        errors[key] = `${key} no puede estar vacío`;\n      }\n    });\n\n    // Check for extremely long values (potential DoS attack)\n    Object.keys(data).forEach(key => {\n      if (typeof data[key] === 'string' && data[key].length > 1000) {\n        errors[key] = `${key} excede la longitud máxima permitida`;\n      }\n    });\n    return {\n      isValid: Object.keys(errors).length === 0,\n      errors\n    };\n  }\n\n  // Rate limiting helper for validation\n  static createRateLimiter(maxAttempts, windowMs) {\n    const attempts = new Map();\n    return identifier => {\n      const now = Date.now();\n      const userAttempts = attempts.get(identifier);\n      if (!userAttempts || now > userAttempts.resetTime) {\n        attempts.set(identifier, {\n          count: 1,\n          resetTime: now + windowMs\n        });\n        return true;\n      }\n      if (userAttempts.count >= maxAttempts) {\n        return false;\n      }\n      userAttempts.count++;\n      return true;\n    };\n  }\n  static sanitizeAmountInput(value) {\n    // Allow digits and one decimal point\n    const sanitized = value.replace(/[^0-9.]/g, '');\n    const parts = sanitized.split('.');\n    if (parts.length > 2) {\n      return parts[0] + '.' + parts.slice(1).join('');\n    }\n    return sanitized;\n  }\n}\n\n// Export individual validation functions for easier use\nexport const {\n  validateName,\n  validatePhoneNumber,\n  validateCity,\n  validateCourse,\n  validateEmail,\n  validatePassword,\n  validatePaymentStatus,\n  validatePaymentAmount,\n  sanitizePhoneInput,\n  sanitizeNameInput,\n  sanitizeAmountInput\n} = ValidationUtils;","map":{"version":3,"names":["ValidationUtils","validateName","value","fieldName","trim","isValid","message","trimmedValue","length","test","suspiciousPatterns","some","pattern","validatePhoneNumber","cleanPhone","replace","startsWith","validateCity","validateCourse","validCourses","includes","validateEmail","emailRegex","validatePassword","validatePaymentStatus","validStatuses","validatePaymentAmount","amount","parseFloat","isNaN","sanitizePhoneInput","digits","slice","sanitizeNameInput","validateFormData","data","errors","Object","keys","forEach","key","undefined","createRateLimiter","maxAttempts","windowMs","attempts","Map","identifier","now","Date","userAttempts","get","resetTime","set","count","sanitizeAmountInput","sanitized","parts","split","join"],"sources":["/home/joserodriguez/educonnect/frontend/src/utils/validation.ts"],"sourcesContent":["// Validation utilities for form inputs\n\nexport interface ValidationResult {\n  isValid: boolean;\n  message?: string;\n}\n\nexport class ValidationUtils {\n  // Name validation (for nombre and apellido)\n  static validateName(value: string, fieldName: string): ValidationResult {\n    if (!value || value.trim() === '') {\n      return { isValid: false, message: `${fieldName} es requerido` };\n    }\n    \n    const trimmedValue = value.trim();\n    \n    if (trimmedValue.length < 2) {\n      return { isValid: false, message: `${fieldName} debe tener al menos 2 caracteres` };\n    }\n    \n    if (trimmedValue.length > 50) {\n      return { isValid: false, message: `${fieldName} no puede exceder 50 caracteres` };\n    }\n    \n    if (!/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$/.test(trimmedValue)) {\n      return { isValid: false, message: `${fieldName} solo puede contener letras y espacios` };\n    }\n    \n    // Check for excessive whitespace\n    if (/\\s{2,}/.test(trimmedValue)) {\n      return { isValid: false, message: `${fieldName} no puede contener espacios múltiples consecutivos` };\n    }\n    \n    // Check for suspicious patterns (basic XSS protection)\n    const suspiciousPatterns = [\n      /<script/i,\n      /javascript:/i,\n      /on\\w+\\s*=/i,\n      /<iframe/i,\n      /eval\\(/i\n    ];\n    \n    if (suspiciousPatterns.some(pattern => pattern.test(value))) {\n      return { isValid: false, message: `${fieldName} contiene caracteres no permitidos` };\n    }\n    \n    return { isValid: true };\n  }\n\n  // Phone number validation (Colombian format)\n  static validatePhoneNumber(value: string): ValidationResult {\n    if (!value || value.trim() === '') {\n      return { isValid: false, message: 'El número celular es requerido' };\n    }\n    \n    const cleanPhone = value.replace(/\\D/g, '');\n    \n    if (cleanPhone.length !== 10) {\n      return { isValid: false, message: 'El número celular debe tener exactamente 10 dígitos' };\n    }\n    \n    if (!cleanPhone.startsWith('3')) {\n      return { isValid: false, message: 'El número celular debe comenzar con 3' };\n    }\n    \n    return { isValid: true };\n  }\n\n  // City validation\n  static validateCity(value: string): ValidationResult {\n    if (!value || value.trim() === '') {\n      return { isValid: false, message: 'La ciudad es requerida' };\n    }\n    \n    const trimmedValue = value.trim();\n    \n    if (trimmedValue.length < 2) {\n      return { isValid: false, message: 'La ciudad debe tener al menos 2 caracteres' };\n    }\n    \n    if (trimmedValue.length > 50) {\n      return { isValid: false, message: 'La ciudad no puede exceder 50 caracteres' };\n    }\n    \n    if (!/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$/.test(trimmedValue)) {\n      return { isValid: false, message: 'La ciudad solo puede contener letras y espacios' };\n    }\n    \n    // Check for excessive whitespace\n    if (/\\s{2,}/.test(trimmedValue)) {\n      return { isValid: false, message: 'La ciudad no puede contener espacios múltiples consecutivos' };\n    }\n    \n    return { isValid: true };\n  }\n\n  // Course validation\n  static validateCourse(value: string): ValidationResult {\n    if (!value || value.trim() === '') {\n      return { isValid: false, message: 'Debe seleccionar un curso' };\n    }\n    \n    const validCourses = ['Sanación de las familias', 'Angelología'];\n    if (!validCourses.includes(value.trim())) {\n      return { isValid: false, message: 'Curso no válido' };\n    }\n    \n    return { isValid: true };\n  }\n\n  // Email validation\n  static validateEmail(value: string): ValidationResult {\n    if (!value || value.trim() === '') {\n      return { isValid: false, message: 'El correo electrónico es requerido' };\n    }\n    \n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(value.trim())) {\n      return { isValid: false, message: 'Ingresa un correo electrónico válido' };\n    }\n    \n    return { isValid: true };\n  }\n\n  // Password validation\n  static validatePassword(value: string): ValidationResult {\n    if (!value || value.trim() === '') {\n      return { isValid: false, message: 'La contraseña es requerida' };\n    }\n    \n    return { isValid: true };\n  }\n\n  // Payment status validation\n  static validatePaymentStatus(value: string): ValidationResult {\n    if (!value || value.trim() === '') {\n      return { isValid: false, message: 'Debe seleccionar un estado de pago' };\n    }\n    \n    const validStatuses = ['pendiente', 'parcial', 'completo'];\n    if (!validStatuses.includes(value)) {\n      return { isValid: false, message: 'Estado de pago no válido' };\n    }\n    \n    return { isValid: true };\n  }\n\n  // Payment amount validation\n  static validatePaymentAmount(value: string): ValidationResult {\n    if (!value || value.trim() === '') {\n      return { isValid: false, message: 'La cantidad es requerida' };\n    }\n    \n    const amount = parseFloat(value);\n    if (isNaN(amount)) {\n      return { isValid: false, message: 'La cantidad debe ser un número válido' };\n    }\n    \n    if (amount < 0) {\n      return { isValid: false, message: 'La cantidad no puede ser negativa' };\n    }\n    \n    if (amount > 10000000) {\n      return { isValid: false, message: 'La cantidad no puede exceder $10,000,000' };\n    }\n    \n    return { isValid: true };\n  }\n\n  // Real-time input sanitization\n  static sanitizePhoneInput(value: string): string {\n    // Only allow digits and limit to 10 characters\n    const digits = value.replace(/\\D/g, '');\n    return digits.slice(0, 10);\n  }\n\n  static sanitizeNameInput(value: string): string {\n    // Allow letters, spaces, and accented characters, then replace multiple spaces with single space\n    return value.replace(/[^a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]/g, '').replace(/\\s+/g, ' ').slice(0, 50);\n  }\n\n  // Enhanced validation for edge cases\n  static validateFormData(data: Record<string, any>): { isValid: boolean; errors: Record<string, string> } {\n    const errors: Record<string, string> = {};\n\n    // Check for null/undefined values\n    Object.keys(data).forEach(key => {\n      if (data[key] === null || data[key] === undefined) {\n        errors[key] = `${key} no puede estar vacío`;\n      }\n    });\n\n    // Check for extremely long values (potential DoS attack)\n    Object.keys(data).forEach(key => {\n      if (typeof data[key] === 'string' && data[key].length > 1000) {\n        errors[key] = `${key} excede la longitud máxima permitida`;\n      }\n    });\n\n    return {\n      isValid: Object.keys(errors).length === 0,\n      errors\n    };\n  }\n\n  // Rate limiting helper for validation\n  static createRateLimiter(maxAttempts: number, windowMs: number) {\n    const attempts = new Map<string, { count: number; resetTime: number }>();\n\n    return (identifier: string): boolean => {\n      const now = Date.now();\n      const userAttempts = attempts.get(identifier);\n\n      if (!userAttempts || now > userAttempts.resetTime) {\n        attempts.set(identifier, { count: 1, resetTime: now + windowMs });\n        return true;\n      }\n\n      if (userAttempts.count >= maxAttempts) {\n        return false;\n      }\n\n      userAttempts.count++;\n      return true;\n    };\n  }\n\n  static sanitizeAmountInput(value: string): string {\n    // Allow digits and one decimal point\n    const sanitized = value.replace(/[^0-9.]/g, '');\n    const parts = sanitized.split('.');\n    if (parts.length > 2) {\n      return parts[0] + '.' + parts.slice(1).join('');\n    }\n    return sanitized;\n  }\n}\n\n// Export individual validation functions for easier use\nexport const {\n  validateName,\n  validatePhoneNumber,\n  validateCity,\n  validateCourse,\n  validateEmail,\n  validatePassword,\n  validatePaymentStatus,\n  validatePaymentAmount,\n  sanitizePhoneInput,\n  sanitizeNameInput,\n  sanitizeAmountInput\n} = ValidationUtils;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}