{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';export const useNetworkStatus=()=>{const[networkStatus,setNetworkStatus]=useState({isOnline:navigator.onLine,isSlowConnection:false,connectionType:'unknown'});const[lastOnlineTime,setLastOnlineTime]=useState(navigator.onLine?new Date():null);const[offlineDuration,setOfflineDuration]=useState(0);// Get connection information if available\nconst getConnectionInfo=useCallback(()=>{// @ts-ignore - NetworkInformation is not fully supported in TypeScript\nconst connection=navigator.connection||navigator.mozConnection||navigator.webkitConnection;if(connection){return{connectionType:connection.type||connection.effectiveType||'unknown',downlink:connection.downlink,effectiveType:connection.effectiveType,isSlowConnection:connection.effectiveType==='slow-2g'||connection.effectiveType==='2g'||connection.downlink&&connection.downlink<0.5};}return{connectionType:'unknown',isSlowConnection:false};},[]);// Update network status\nconst updateNetworkStatus=useCallback(()=>{const isOnline=navigator.onLine;const connectionInfo=getConnectionInfo();setNetworkStatus(prev=>({...prev,isOnline,...connectionInfo}));if(isOnline){setLastOnlineTime(new Date());setOfflineDuration(0);}else if(lastOnlineTime){const duration=Math.floor((Date.now()-lastOnlineTime.getTime())/1000);setOfflineDuration(duration);}},[getConnectionInfo,lastOnlineTime]);// Retry connection by attempting a simple fetch\nconst retryConnection=useCallback(async()=>{try{// Try to fetch a small resource to test connectivity\nconst response=await fetch('/favicon.ico',{method:'HEAD',cache:'no-cache'});if(response.ok){updateNetworkStatus();}}catch(error){// Connection still not available\nconsole.warn('Connection retry failed:',error);}},[updateNetworkStatus]);useEffect(()=>{// Initial setup\nupdateNetworkStatus();// Event listeners for online/offline events\nconst handleOnline=()=>{updateNetworkStatus();};const handleOffline=()=>{updateNetworkStatus();};// Connection change listener (if supported)\nconst handleConnectionChange=()=>{updateNetworkStatus();};window.addEventListener('online',handleOnline);window.addEventListener('offline',handleOffline);// @ts-ignore - NetworkInformation is not fully supported in TypeScript\nconst connection=navigator.connection||navigator.mozConnection||navigator.webkitConnection;if(connection){connection.addEventListener('change',handleConnectionChange);}// Update offline duration every second when offline\nconst interval=setInterval(()=>{if(!navigator.onLine&&lastOnlineTime){const duration=Math.floor((Date.now()-lastOnlineTime.getTime())/1000);setOfflineDuration(duration);}},1000);return()=>{window.removeEventListener('online',handleOnline);window.removeEventListener('offline',handleOffline);if(connection){connection.removeEventListener('change',handleConnectionChange);}clearInterval(interval);};},[updateNetworkStatus,lastOnlineTime]);return{...networkStatus,retryConnection,lastOnlineTime,offlineDuration};};","map":{"version":3,"names":["useState","useEffect","useCallback","useNetworkStatus","networkStatus","setNetworkStatus","isOnline","navigator","onLine","isSlowConnection","connectionType","lastOnlineTime","setLastOnlineTime","Date","offlineDuration","setOfflineDuration","getConnectionInfo","connection","mozConnection","webkitConnection","type","effectiveType","downlink","updateNetworkStatus","connectionInfo","prev","duration","Math","floor","now","getTime","retryConnection","response","fetch","method","cache","ok","error","console","warn","handleOnline","handleOffline","handleConnectionChange","window","addEventListener","interval","setInterval","removeEventListener","clearInterval"],"sources":["/home/joserodriguez/educonnect/frontend/src/hooks/useNetworkStatus.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\ninterface NetworkStatus {\n  isOnline: boolean;\n  isSlowConnection: boolean;\n  connectionType: string;\n  downlink?: number;\n  effectiveType?: string;\n}\n\ninterface UseNetworkStatusReturn extends NetworkStatus {\n  retryConnection: () => void;\n  lastOnlineTime: Date | null;\n  offlineDuration: number; // in seconds\n}\n\nexport const useNetworkStatus = (): UseNetworkStatusReturn => {\n  const [networkStatus, setNetworkStatus] = useState<NetworkStatus>({\n    isOnline: navigator.onLine,\n    isSlowConnection: false,\n    connectionType: 'unknown',\n  });\n  \n  const [lastOnlineTime, setLastOnlineTime] = useState<Date | null>(\n    navigator.onLine ? new Date() : null\n  );\n  \n  const [offlineDuration, setOfflineDuration] = useState(0);\n\n  // Get connection information if available\n  const getConnectionInfo = useCallback((): Partial<NetworkStatus> => {\n    // @ts-ignore - NetworkInformation is not fully supported in TypeScript\n    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n    \n    if (connection) {\n      return {\n        connectionType: connection.type || connection.effectiveType || 'unknown',\n        downlink: connection.downlink,\n        effectiveType: connection.effectiveType,\n        isSlowConnection: connection.effectiveType === 'slow-2g' || \n                         connection.effectiveType === '2g' ||\n                         (connection.downlink && connection.downlink < 0.5),\n      };\n    }\n    \n    return {\n      connectionType: 'unknown',\n      isSlowConnection: false,\n    };\n  }, []);\n\n  // Update network status\n  const updateNetworkStatus = useCallback(() => {\n    const isOnline = navigator.onLine;\n    const connectionInfo = getConnectionInfo();\n    \n    setNetworkStatus(prev => ({\n      ...prev,\n      isOnline,\n      ...connectionInfo,\n    }));\n\n    if (isOnline) {\n      setLastOnlineTime(new Date());\n      setOfflineDuration(0);\n    } else if (lastOnlineTime) {\n      const duration = Math.floor((Date.now() - lastOnlineTime.getTime()) / 1000);\n      setOfflineDuration(duration);\n    }\n  }, [getConnectionInfo, lastOnlineTime]);\n\n  // Retry connection by attempting a simple fetch\n  const retryConnection = useCallback(async () => {\n    try {\n      // Try to fetch a small resource to test connectivity\n      const response = await fetch('/favicon.ico', {\n        method: 'HEAD',\n        cache: 'no-cache',\n      });\n      \n      if (response.ok) {\n        updateNetworkStatus();\n      }\n    } catch (error) {\n      // Connection still not available\n      console.warn('Connection retry failed:', error);\n    }\n  }, [updateNetworkStatus]);\n\n  useEffect(() => {\n    // Initial setup\n    updateNetworkStatus();\n\n    // Event listeners for online/offline events\n    const handleOnline = () => {\n      updateNetworkStatus();\n    };\n\n    const handleOffline = () => {\n      updateNetworkStatus();\n    };\n\n    // Connection change listener (if supported)\n    const handleConnectionChange = () => {\n      updateNetworkStatus();\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // @ts-ignore - NetworkInformation is not fully supported in TypeScript\n    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n    if (connection) {\n      connection.addEventListener('change', handleConnectionChange);\n    }\n\n    // Update offline duration every second when offline\n    const interval = setInterval(() => {\n      if (!navigator.onLine && lastOnlineTime) {\n        const duration = Math.floor((Date.now() - lastOnlineTime.getTime()) / 1000);\n        setOfflineDuration(duration);\n      }\n    }, 1000);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n      \n      if (connection) {\n        connection.removeEventListener('change', handleConnectionChange);\n      }\n      \n      clearInterval(interval);\n    };\n  }, [updateNetworkStatus, lastOnlineTime]);\n\n  return {\n    ...networkStatus,\n    retryConnection,\n    lastOnlineTime,\n    offlineDuration,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}