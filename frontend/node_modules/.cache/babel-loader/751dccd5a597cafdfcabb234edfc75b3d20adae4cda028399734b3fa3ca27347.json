{"ast":null,"code":"// API Service Layer for EduConnect Frontend\n// Handles all HTTP requests to the backend API\nclass ApiService{constructor(){this.baseURL=void 0;// Use proxy configuration from package.json in development\n// In production, use the full API URL\nthis.baseURL=process.env.NODE_ENV==='production'?process.env.REACT_APP_API_URL||'/api':'/api';// Proxy will redirect to backend on port 3500\n}// Generic request method with error handling, timeout, and retry logic\nasync request(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let retries=arguments.length>2&&arguments[2]!==undefined?arguments[2]:2;let timeout=arguments.length>3&&arguments[3]!==undefined?arguments[3]:10000;const url=`${this.baseURL}${endpoint}`;// Create abort controller for timeout\nconst controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),timeout);const config={headers:{'Content-Type':'application/json',...options.headers},credentials:'include',// Include cookies for session management\nsignal:controller.signal,...options};try{const response=await fetch(url,config);clearTimeout(timeoutId);if(!response.ok){const errorData=await response.json().catch(()=>({}));// Enhanced error handling based on status codes\nlet message=errorData.message||`HTTP ${response.status}: ${response.statusText}`;switch(response.status){case 400:message=errorData.message||'Datos inválidos. Verifica la información ingresada.';break;case 401:message=errorData.message||'No autorizado. Verifica tus credenciales.';break;case 403:message=errorData.message||'Acceso denegado.';break;case 404:message=errorData.message||'Recurso no encontrado.';break;case 409:message=errorData.message||'Conflicto con el estado actual del recurso.';break;case 422:message=errorData.message||'Error de validación en los datos enviados.';break;case 429:message='Demasiadas solicitudes. Intenta nuevamente en unos momentos.';break;case 500:message='Error interno del servidor. Intenta nuevamente más tarde.';break;case 502:message='Error del servidor. El servicio no está disponible temporalmente.';break;case 503:message='Servicio no disponible. Intenta nuevamente más tarde.';break;case 504:message='Tiempo de espera agotado. El servidor tardó demasiado en responder.';break;default:message=errorData.message||'Error inesperado. Intenta nuevamente.';}const error={message,status:response.status,errors:errorData.errors};throw error;}const data=await response.json();return data;}catch(error){clearTimeout(timeoutId);// Handle timeout errors\nif(error instanceof Error&&error.name==='AbortError'){if(retries>0){// Exponential backoff for retries\nconst delay=Math.min(1000*Math.pow(2,2-retries),5000);await new Promise(resolve=>setTimeout(resolve,delay));return this.request(endpoint,options,retries-1,timeout);}const timeoutError={message:'La solicitud tardó demasiado tiempo. Verifica tu conexión a internet.',status:408};throw timeoutError;}// Handle network errors\nif(error instanceof TypeError&&(error.message.includes('fetch')||error.message.includes('network')||error.message.includes('Failed to fetch'))){if(retries>0){// Exponential backoff for network errors\nconst delay=Math.min(1000*Math.pow(2,2-retries),5000);await new Promise(resolve=>setTimeout(resolve,delay));return this.request(endpoint,options,retries-1,timeout);}const networkError={message:'Error de conexión. Verifica tu conexión a internet y vuelve a intentar.',status:0};throw networkError;}// Handle server errors (5xx) with retry\nif(error instanceof Error&&'status'in error){const apiError=error;if(apiError.status>=500&&retries>0){// Longer delay for server errors\nconst delay=Math.min(2000*Math.pow(2,2-retries),10000);await new Promise(resolve=>setTimeout(resolve,delay));return this.request(endpoint,options,retries-1,timeout);}}// Handle rate limiting (429) with retry\nif(error instanceof Error&&'status'in error){const apiError=error;if(apiError.status===429&&retries>0){// Wait longer for rate limiting\nconst delay=Math.min(5000*Math.pow(2,2-retries),30000);await new Promise(resolve=>setTimeout(resolve,delay));return this.request(endpoint,options,retries-1,timeout);}}throw error;}}// Student API methods\nasync getPublicStudents(){const response=await this.request('/students/public');return response.data||[];}async registerStudent(student){const response=await this.request('/students',{method:'POST',body:JSON.stringify(student)});return response.data;}async getAdminStudents(){const response=await this.request('/students/admin');return response.data||[];}async updateStudent(id,student){const response=await this.request(`/students/${id}`,{method:'PUT',body:JSON.stringify(student)});return response.data;}// Authentication API methods\nasync login(credentials){await this.request('/auth/login',{method:'POST',body:JSON.stringify(credentials)});}async logout(){await this.request('/auth/logout',{method:'POST'});}async getCurrentAdmin(){try{const response=await this.request('/auth/me');return response.data;}catch(error){const apiError=error;// Don't log 401 errors for getCurrentAdmin as they're expected when not authenticated\nif(apiError.status===401){throw error;// Re-throw without logging\n}// Log other unexpected errors\nconsole.error('Unexpected error in getCurrentAdmin:',error);throw error;}}// Silent auth check method for initial app load\nasync checkAuthStatus(){try{// Use a more direct approach for auth checking\nconst url=`${this.baseURL}/auth/me`;const response=await fetch(url,{method:'GET',headers:{'Content-Type':'application/json'},credentials:'include'});if(response.ok){return true;}else if(response.status===401){// Expected when not authenticated - return false silently\nreturn false;}else{// Unexpected error - throw it\nconst errorData=await response.json().catch(()=>({}));const error={message:errorData.message||`HTTP ${response.status}: ${response.statusText}`,status:response.status};throw error;}}catch(error){// Handle network errors\nif(error instanceof TypeError&&error.message.includes('fetch')){const networkError={message:'Error de conexión. Verifica tu conexión a internet.',status:0};throw networkError;}throw error;}}}// Create and export a singleton instance\nexport const apiService=new ApiService();// Export individual methods for easier testing and usage\nexport const studentApi={getPublicStudents:()=>apiService.getPublicStudents(),registerStudent:student=>apiService.registerStudent(student),getAdminStudents:()=>apiService.getAdminStudents(),updateStudent:(id,student)=>apiService.updateStudent(id,student)};export const authApi={login:credentials=>apiService.login(credentials),logout:()=>apiService.logout(),getCurrentAdmin:()=>apiService.getCurrentAdmin(),checkAuthStatus:()=>apiService.checkAuthStatus()};","map":{"version":3,"names":["ApiService","constructor","baseURL","process","env","NODE_ENV","REACT_APP_API_URL","request","endpoint","options","arguments","length","undefined","retries","timeout","url","controller","AbortController","timeoutId","setTimeout","abort","config","headers","credentials","signal","response","fetch","clearTimeout","ok","errorData","json","catch","message","status","statusText","error","errors","data","Error","name","delay","Math","min","pow","Promise","resolve","timeoutError","TypeError","includes","networkError","apiError","getPublicStudents","registerStudent","student","method","body","JSON","stringify","getAdminStudents","updateStudent","id","login","logout","getCurrentAdmin","console","checkAuthStatus","apiService","studentApi","authApi"],"sources":["/home/joserodriguez/educonnect/frontend/src/services/api.ts"],"sourcesContent":["// API Service Layer for EduConnect Frontend\n// Handles all HTTP requests to the backend API\n\nexport interface Student {\n  id?: number;\n  nombre: string;\n  apellido: string;\n  celular: string;\n  ciudad: string;\n  curso: string;\n  estadoPago?: 'pendiente' | 'parcial' | 'completo';\n  cantidadPago?: number;\n  fechaRegistro?: string;\n  fechaActualizacion?: string;\n}\n\nexport interface PublicStudent {\n  id: number;\n  nombre: string;\n  apellido: string;\n  ciudad: string;\n  celular: string;\n}\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface ApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  message?: string;\n  errors?: string[];\n}\n\nexport interface BackendValidationError {\n  path: string;\n  msg: string;\n}\n\nexport interface ApiError {\n  message: string;\n  status: number;\n  errors?: BackendValidationError[];\n}\n\nclass ApiService {\n  private baseURL: string;\n\n  constructor() {\n    // Use proxy configuration from package.json in development\n    // In production, use the full API URL\n    this.baseURL = process.env.NODE_ENV === 'production' \n      ? process.env.REACT_APP_API_URL || '/api'\n      : '/api'; // Proxy will redirect to backend on port 3500\n  }\n\n  // Generic request method with error handling, timeout, and retry logic\n  private async request<T>(\n    endpoint: string, \n    options: RequestInit = {},\n    retries: number = 2,\n    timeout: number = 10000\n  ): Promise<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    // Create abort controller for timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n    \n    const config: RequestInit = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      credentials: 'include', // Include cookies for session management\n      signal: controller.signal,\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        \n        // Enhanced error handling based on status codes\n        let message = errorData.message || `HTTP ${response.status}: ${response.statusText}`;\n        \n        switch (response.status) {\n          case 400:\n            message = errorData.message || 'Datos inválidos. Verifica la información ingresada.';\n            break;\n          case 401:\n            message = errorData.message || 'No autorizado. Verifica tus credenciales.';\n            break;\n          case 403:\n            message = errorData.message || 'Acceso denegado.';\n            break;\n          case 404:\n            message = errorData.message || 'Recurso no encontrado.';\n            break;\n          case 409:\n            message = errorData.message || 'Conflicto con el estado actual del recurso.';\n            break;\n          case 422:\n            message = errorData.message || 'Error de validación en los datos enviados.';\n            break;\n          case 429:\n            message = 'Demasiadas solicitudes. Intenta nuevamente en unos momentos.';\n            break;\n          case 500:\n            message = 'Error interno del servidor. Intenta nuevamente más tarde.';\n            break;\n          case 502:\n            message = 'Error del servidor. El servicio no está disponible temporalmente.';\n            break;\n          case 503:\n            message = 'Servicio no disponible. Intenta nuevamente más tarde.';\n            break;\n          case 504:\n            message = 'Tiempo de espera agotado. El servidor tardó demasiado en responder.';\n            break;\n          default:\n            message = errorData.message || 'Error inesperado. Intenta nuevamente.';\n        }\n        \n        const error: ApiError = {\n          message,\n          status: response.status,\n          errors: errorData.errors,\n        };\n        throw error;\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      clearTimeout(timeoutId);\n      \n      // Handle timeout errors\n      if (error instanceof Error && error.name === 'AbortError') {\n        if (retries > 0) {\n          // Exponential backoff for retries\n          const delay = Math.min(1000 * Math.pow(2, 2 - retries), 5000);\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return this.request<T>(endpoint, options, retries - 1, timeout);\n        }\n        \n        const timeoutError: ApiError = {\n          message: 'La solicitud tardó demasiado tiempo. Verifica tu conexión a internet.',\n          status: 408,\n        };\n        throw timeoutError;\n      }\n      \n      // Handle network errors\n      if (error instanceof TypeError && (\n        error.message.includes('fetch') || \n        error.message.includes('network') ||\n        error.message.includes('Failed to fetch')\n      )) {\n        if (retries > 0) {\n          // Exponential backoff for network errors\n          const delay = Math.min(1000 * Math.pow(2, 2 - retries), 5000);\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return this.request<T>(endpoint, options, retries - 1, timeout);\n        }\n        \n        const networkError: ApiError = {\n          message: 'Error de conexión. Verifica tu conexión a internet y vuelve a intentar.',\n          status: 0,\n        };\n        throw networkError;\n      }\n      \n      // Handle server errors (5xx) with retry\n      if (error instanceof Error && 'status' in error) {\n        const apiError = error as ApiError;\n        if (apiError.status >= 500 && retries > 0) {\n          // Longer delay for server errors\n          const delay = Math.min(2000 * Math.pow(2, 2 - retries), 10000);\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return this.request<T>(endpoint, options, retries - 1, timeout);\n        }\n      }\n      \n      // Handle rate limiting (429) with retry\n      if (error instanceof Error && 'status' in error) {\n        const apiError = error as ApiError;\n        if (apiError.status === 429 && retries > 0) {\n          // Wait longer for rate limiting\n          const delay = Math.min(5000 * Math.pow(2, 2 - retries), 30000);\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return this.request<T>(endpoint, options, retries - 1, timeout);\n        }\n      }\n      \n      throw error;\n    }\n  }\n\n  // Student API methods\n  async getPublicStudents(): Promise<PublicStudent[]> {\n    const response = await this.request<ApiResponse<PublicStudent[]>>('/students/public');\n    return response.data || [];\n  }\n\n  async registerStudent(student: Omit<Student, 'id' | 'estadoPago' | 'cantidadPago' | 'fechaRegistro' | 'fechaActualizacion'>): Promise<Student> {\n    const response = await this.request<ApiResponse<Student>>('/students', {\n      method: 'POST',\n      body: JSON.stringify(student),\n    });\n    return response.data!;\n  }\n\n  async getAdminStudents(): Promise<Student[]> {\n    const response = await this.request<ApiResponse<Student[]>>('/students/admin');\n    return response.data || [];\n  }\n\n  async updateStudent(id: number, student: Partial<Student>): Promise<Student> {\n    const response = await this.request<ApiResponse<Student>>(`/students/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(student),\n    });\n    return response.data!;\n  }\n\n  // Authentication API methods\n  async login(credentials: LoginCredentials): Promise<void> {\n    await this.request<ApiResponse>('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials),\n    });\n  }\n\n  async logout(): Promise<void> {\n    await this.request<ApiResponse>('/auth/logout', {\n      method: 'POST',\n    });\n  }\n\n  async getCurrentAdmin(): Promise<any> {\n    try {\n      const response = await this.request<ApiResponse>('/auth/me');\n      return response.data;\n    } catch (error) {\n      const apiError = error as ApiError;\n      // Don't log 401 errors for getCurrentAdmin as they're expected when not authenticated\n      if (apiError.status === 401) {\n        throw error; // Re-throw without logging\n      }\n      // Log other unexpected errors\n      console.error('Unexpected error in getCurrentAdmin:', error);\n      throw error;\n    }\n  }\n\n  // Silent auth check method for initial app load\n  async checkAuthStatus(): Promise<boolean> {\n    try {\n      // Use a more direct approach for auth checking\n      const url = `${this.baseURL}/auth/me`;\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n      });\n\n      if (response.ok) {\n        return true;\n      } else if (response.status === 401) {\n        // Expected when not authenticated - return false silently\n        return false;\n      } else {\n        // Unexpected error - throw it\n        const errorData = await response.json().catch(() => ({}));\n        const error: ApiError = {\n          message: errorData.message || `HTTP ${response.status}: ${response.statusText}`,\n          status: response.status,\n        };\n        throw error;\n      }\n    } catch (error) {\n      // Handle network errors\n      if (error instanceof TypeError && error.message.includes('fetch')) {\n        const networkError: ApiError = {\n          message: 'Error de conexión. Verifica tu conexión a internet.',\n          status: 0,\n        };\n        throw networkError;\n      }\n      throw error;\n    }\n  }\n}\n\n// Create and export a singleton instance\nexport const apiService = new ApiService();\n\n// Export individual methods for easier testing and usage\nexport const studentApi = {\n  getPublicStudents: () => apiService.getPublicStudents(),\n  registerStudent: (student: Omit<Student, 'id' | 'estadoPago' | 'cantidadPago' | 'fechaRegistro' | 'fechaActualizacion'>) => \n    apiService.registerStudent(student),\n  getAdminStudents: () => apiService.getAdminStudents(),\n  updateStudent: (id: number, student: Partial<Student>) => \n    apiService.updateStudent(id, student),\n};\n\nexport const authApi = {\n  login: (credentials: LoginCredentials) => apiService.login(credentials),\n  logout: () => apiService.logout(),\n  getCurrentAdmin: () => apiService.getCurrentAdmin(),\n  checkAuthStatus: () => apiService.checkAuthStatus(),\n};"],"mappings":"AAAA;AACA;AA8CA,KAAM,CAAAA,UAAW,CAGfC,WAAWA,CAAA,CAAG,MAFNC,OAAO,QAGb;AACA;AACA,IAAI,CAACA,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,CAChDF,OAAO,CAACC,GAAG,CAACE,iBAAiB,EAAI,MAAM,CACvC,MAAM,CAAE;AACd,CAEA;AACA,KAAc,CAAAC,OAAOA,CACnBC,QAAgB,CAIJ,IAHZ,CAAAC,OAAoB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,IACzB,CAAAG,OAAe,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,IACnB,CAAAI,OAAe,CAAAJ,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,CAEvB,KAAM,CAAAK,GAAG,CAAG,GAAG,IAAI,CAACb,OAAO,GAAGM,QAAQ,EAAE,CAExC;AACA,KAAM,CAAAQ,UAAU,CAAG,GAAI,CAAAC,eAAe,CAAC,CAAC,CACxC,KAAM,CAAAC,SAAS,CAAGC,UAAU,CAAC,IAAMH,UAAU,CAACI,KAAK,CAAC,CAAC,CAAEN,OAAO,CAAC,CAE/D,KAAM,CAAAO,MAAmB,CAAG,CAC1BC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,GAAGb,OAAO,CAACa,OACb,CAAC,CACDC,WAAW,CAAE,SAAS,CAAE;AACxBC,MAAM,CAAER,UAAU,CAACQ,MAAM,CACzB,GAAGf,OACL,CAAC,CAED,GAAI,CACF,KAAM,CAAAgB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACX,GAAG,CAAEM,MAAM,CAAC,CACzCM,YAAY,CAACT,SAAS,CAAC,CAEvB,GAAI,CAACO,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,KAAO,CAAC,CAAC,CAAC,CAAC,CAEzD;AACA,GAAI,CAAAC,OAAO,CAAGH,SAAS,CAACG,OAAO,EAAI,QAAQP,QAAQ,CAACQ,MAAM,KAAKR,QAAQ,CAACS,UAAU,EAAE,CAEpF,OAAQT,QAAQ,CAACQ,MAAM,EACrB,IAAK,IAAG,CACND,OAAO,CAAGH,SAAS,CAACG,OAAO,EAAI,qDAAqD,CACpF,MACF,IAAK,IAAG,CACNA,OAAO,CAAGH,SAAS,CAACG,OAAO,EAAI,2CAA2C,CAC1E,MACF,IAAK,IAAG,CACNA,OAAO,CAAGH,SAAS,CAACG,OAAO,EAAI,kBAAkB,CACjD,MACF,IAAK,IAAG,CACNA,OAAO,CAAGH,SAAS,CAACG,OAAO,EAAI,wBAAwB,CACvD,MACF,IAAK,IAAG,CACNA,OAAO,CAAGH,SAAS,CAACG,OAAO,EAAI,6CAA6C,CAC5E,MACF,IAAK,IAAG,CACNA,OAAO,CAAGH,SAAS,CAACG,OAAO,EAAI,4CAA4C,CAC3E,MACF,IAAK,IAAG,CACNA,OAAO,CAAG,8DAA8D,CACxE,MACF,IAAK,IAAG,CACNA,OAAO,CAAG,2DAA2D,CACrE,MACF,IAAK,IAAG,CACNA,OAAO,CAAG,mEAAmE,CAC7E,MACF,IAAK,IAAG,CACNA,OAAO,CAAG,uDAAuD,CACjE,MACF,IAAK,IAAG,CACNA,OAAO,CAAG,qEAAqE,CAC/E,MACF,QACEA,OAAO,CAAGH,SAAS,CAACG,OAAO,EAAI,uCAAuC,CAC1E,CAEA,KAAM,CAAAG,KAAe,CAAG,CACtBH,OAAO,CACPC,MAAM,CAAER,QAAQ,CAACQ,MAAM,CACvBG,MAAM,CAAEP,SAAS,CAACO,MACpB,CAAC,CACD,KAAM,CAAAD,KAAK,CACb,CAEA,KAAM,CAAAE,IAAI,CAAG,KAAM,CAAAZ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClC,MAAO,CAAAO,IAAI,CACb,CAAE,MAAOF,KAAK,CAAE,CACdR,YAAY,CAACT,SAAS,CAAC,CAEvB;AACA,GAAIiB,KAAK,WAAY,CAAAG,KAAK,EAAIH,KAAK,CAACI,IAAI,GAAK,YAAY,CAAE,CACzD,GAAI1B,OAAO,CAAG,CAAC,CAAE,CACf;AACA,KAAM,CAAA2B,KAAK,CAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAAGD,IAAI,CAACE,GAAG,CAAC,CAAC,CAAE,CAAC,CAAG9B,OAAO,CAAC,CAAE,IAAI,CAAC,CAC7D,KAAM,IAAI,CAAA+B,OAAO,CAACC,OAAO,EAAI1B,UAAU,CAAC0B,OAAO,CAAEL,KAAK,CAAC,CAAC,CACxD,MAAO,KAAI,CAACjC,OAAO,CAAIC,QAAQ,CAAEC,OAAO,CAAEI,OAAO,CAAG,CAAC,CAAEC,OAAO,CAAC,CACjE,CAEA,KAAM,CAAAgC,YAAsB,CAAG,CAC7Bd,OAAO,CAAE,uEAAuE,CAChFC,MAAM,CAAE,GACV,CAAC,CACD,KAAM,CAAAa,YAAY,CACpB,CAEA;AACA,GAAIX,KAAK,WAAY,CAAAY,SAAS,GAC5BZ,KAAK,CAACH,OAAO,CAACgB,QAAQ,CAAC,OAAO,CAAC,EAC/Bb,KAAK,CAACH,OAAO,CAACgB,QAAQ,CAAC,SAAS,CAAC,EACjCb,KAAK,CAACH,OAAO,CAACgB,QAAQ,CAAC,iBAAiB,CAAC,CAC1C,CAAE,CACD,GAAInC,OAAO,CAAG,CAAC,CAAE,CACf;AACA,KAAM,CAAA2B,KAAK,CAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAAGD,IAAI,CAACE,GAAG,CAAC,CAAC,CAAE,CAAC,CAAG9B,OAAO,CAAC,CAAE,IAAI,CAAC,CAC7D,KAAM,IAAI,CAAA+B,OAAO,CAACC,OAAO,EAAI1B,UAAU,CAAC0B,OAAO,CAAEL,KAAK,CAAC,CAAC,CACxD,MAAO,KAAI,CAACjC,OAAO,CAAIC,QAAQ,CAAEC,OAAO,CAAEI,OAAO,CAAG,CAAC,CAAEC,OAAO,CAAC,CACjE,CAEA,KAAM,CAAAmC,YAAsB,CAAG,CAC7BjB,OAAO,CAAE,yEAAyE,CAClFC,MAAM,CAAE,CACV,CAAC,CACD,KAAM,CAAAgB,YAAY,CACpB,CAEA;AACA,GAAId,KAAK,WAAY,CAAAG,KAAK,EAAI,QAAQ,EAAI,CAAAH,KAAK,CAAE,CAC/C,KAAM,CAAAe,QAAQ,CAAGf,KAAiB,CAClC,GAAIe,QAAQ,CAACjB,MAAM,EAAI,GAAG,EAAIpB,OAAO,CAAG,CAAC,CAAE,CACzC;AACA,KAAM,CAAA2B,KAAK,CAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAAGD,IAAI,CAACE,GAAG,CAAC,CAAC,CAAE,CAAC,CAAG9B,OAAO,CAAC,CAAE,KAAK,CAAC,CAC9D,KAAM,IAAI,CAAA+B,OAAO,CAACC,OAAO,EAAI1B,UAAU,CAAC0B,OAAO,CAAEL,KAAK,CAAC,CAAC,CACxD,MAAO,KAAI,CAACjC,OAAO,CAAIC,QAAQ,CAAEC,OAAO,CAAEI,OAAO,CAAG,CAAC,CAAEC,OAAO,CAAC,CACjE,CACF,CAEA;AACA,GAAIqB,KAAK,WAAY,CAAAG,KAAK,EAAI,QAAQ,EAAI,CAAAH,KAAK,CAAE,CAC/C,KAAM,CAAAe,QAAQ,CAAGf,KAAiB,CAClC,GAAIe,QAAQ,CAACjB,MAAM,GAAK,GAAG,EAAIpB,OAAO,CAAG,CAAC,CAAE,CAC1C;AACA,KAAM,CAAA2B,KAAK,CAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAAGD,IAAI,CAACE,GAAG,CAAC,CAAC,CAAE,CAAC,CAAG9B,OAAO,CAAC,CAAE,KAAK,CAAC,CAC9D,KAAM,IAAI,CAAA+B,OAAO,CAACC,OAAO,EAAI1B,UAAU,CAAC0B,OAAO,CAAEL,KAAK,CAAC,CAAC,CACxD,MAAO,KAAI,CAACjC,OAAO,CAAIC,QAAQ,CAAEC,OAAO,CAAEI,OAAO,CAAG,CAAC,CAAEC,OAAO,CAAC,CACjE,CACF,CAEA,KAAM,CAAAqB,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAgB,iBAAiBA,CAAA,CAA6B,CAClD,KAAM,CAAA1B,QAAQ,CAAG,KAAM,KAAI,CAAClB,OAAO,CAA+B,kBAAkB,CAAC,CACrF,MAAO,CAAAkB,QAAQ,CAACY,IAAI,EAAI,EAAE,CAC5B,CAEA,KAAM,CAAAe,eAAeA,CAACC,OAAqG,CAAoB,CAC7I,KAAM,CAAA5B,QAAQ,CAAG,KAAM,KAAI,CAAClB,OAAO,CAAuB,WAAW,CAAE,CACrE+C,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACJ,OAAO,CAC9B,CAAC,CAAC,CACF,MAAO,CAAA5B,QAAQ,CAACY,IAAI,CACtB,CAEA,KAAM,CAAAqB,gBAAgBA,CAAA,CAAuB,CAC3C,KAAM,CAAAjC,QAAQ,CAAG,KAAM,KAAI,CAAClB,OAAO,CAAyB,iBAAiB,CAAC,CAC9E,MAAO,CAAAkB,QAAQ,CAACY,IAAI,EAAI,EAAE,CAC5B,CAEA,KAAM,CAAAsB,aAAaA,CAACC,EAAU,CAAEP,OAAyB,CAAoB,CAC3E,KAAM,CAAA5B,QAAQ,CAAG,KAAM,KAAI,CAAClB,OAAO,CAAuB,aAAaqD,EAAE,EAAE,CAAE,CAC3EN,MAAM,CAAE,KAAK,CACbC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACJ,OAAO,CAC9B,CAAC,CAAC,CACF,MAAO,CAAA5B,QAAQ,CAACY,IAAI,CACtB,CAEA;AACA,KAAM,CAAAwB,KAAKA,CAACtC,WAA6B,CAAiB,CACxD,KAAM,KAAI,CAAChB,OAAO,CAAc,aAAa,CAAE,CAC7C+C,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAClC,WAAW,CAClC,CAAC,CAAC,CACJ,CAEA,KAAM,CAAAuC,MAAMA,CAAA,CAAkB,CAC5B,KAAM,KAAI,CAACvD,OAAO,CAAc,cAAc,CAAE,CAC9C+C,MAAM,CAAE,MACV,CAAC,CAAC,CACJ,CAEA,KAAM,CAAAS,eAAeA,CAAA,CAAiB,CACpC,GAAI,CACF,KAAM,CAAAtC,QAAQ,CAAG,KAAM,KAAI,CAAClB,OAAO,CAAc,UAAU,CAAC,CAC5D,MAAO,CAAAkB,QAAQ,CAACY,IAAI,CACtB,CAAE,MAAOF,KAAK,CAAE,CACd,KAAM,CAAAe,QAAQ,CAAGf,KAAiB,CAClC;AACA,GAAIe,QAAQ,CAACjB,MAAM,GAAK,GAAG,CAAE,CAC3B,KAAM,CAAAE,KAAK,CAAE;AACf,CACA;AACA6B,OAAO,CAAC7B,KAAK,CAAC,sCAAsC,CAAEA,KAAK,CAAC,CAC5D,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAA8B,eAAeA,CAAA,CAAqB,CACxC,GAAI,CACF;AACA,KAAM,CAAAlD,GAAG,CAAG,GAAG,IAAI,CAACb,OAAO,UAAU,CACrC,KAAM,CAAAuB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACX,GAAG,CAAE,CAChCuC,MAAM,CAAE,KAAK,CACbhC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,WAAW,CAAE,SACf,CAAC,CAAC,CAEF,GAAIE,QAAQ,CAACG,EAAE,CAAE,CACf,MAAO,KAAI,CACb,CAAC,IAAM,IAAIH,QAAQ,CAACQ,MAAM,GAAK,GAAG,CAAE,CAClC;AACA,MAAO,MAAK,CACd,CAAC,IAAM,CACL;AACA,KAAM,CAAAJ,SAAS,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,KAAO,CAAC,CAAC,CAAC,CAAC,CACzD,KAAM,CAAAI,KAAe,CAAG,CACtBH,OAAO,CAAEH,SAAS,CAACG,OAAO,EAAI,QAAQP,QAAQ,CAACQ,MAAM,KAAKR,QAAQ,CAACS,UAAU,EAAE,CAC/ED,MAAM,CAAER,QAAQ,CAACQ,MACnB,CAAC,CACD,KAAM,CAAAE,KAAK,CACb,CACF,CAAE,MAAOA,KAAK,CAAE,CACd;AACA,GAAIA,KAAK,WAAY,CAAAY,SAAS,EAAIZ,KAAK,CAACH,OAAO,CAACgB,QAAQ,CAAC,OAAO,CAAC,CAAE,CACjE,KAAM,CAAAC,YAAsB,CAAG,CAC7BjB,OAAO,CAAE,qDAAqD,CAC9DC,MAAM,CAAE,CACV,CAAC,CACD,KAAM,CAAAgB,YAAY,CACpB,CACA,KAAM,CAAAd,KAAK,CACb,CACF,CACF,CAEA;AACA,MAAO,MAAM,CAAA+B,UAAU,CAAG,GAAI,CAAAlE,UAAU,CAAC,CAAC,CAE1C;AACA,MAAO,MAAM,CAAAmE,UAAU,CAAG,CACxBhB,iBAAiB,CAAEA,CAAA,GAAMe,UAAU,CAACf,iBAAiB,CAAC,CAAC,CACvDC,eAAe,CAAGC,OAAqG,EACrHa,UAAU,CAACd,eAAe,CAACC,OAAO,CAAC,CACrCK,gBAAgB,CAAEA,CAAA,GAAMQ,UAAU,CAACR,gBAAgB,CAAC,CAAC,CACrDC,aAAa,CAAEA,CAACC,EAAU,CAAEP,OAAyB,GACnDa,UAAU,CAACP,aAAa,CAACC,EAAE,CAAEP,OAAO,CACxC,CAAC,CAED,MAAO,MAAM,CAAAe,OAAO,CAAG,CACrBP,KAAK,CAAGtC,WAA6B,EAAK2C,UAAU,CAACL,KAAK,CAACtC,WAAW,CAAC,CACvEuC,MAAM,CAAEA,CAAA,GAAMI,UAAU,CAACJ,MAAM,CAAC,CAAC,CACjCC,eAAe,CAAEA,CAAA,GAAMG,UAAU,CAACH,eAAe,CAAC,CAAC,CACnDE,eAAe,CAAEA,CAAA,GAAMC,UAAU,CAACD,eAAe,CAAC,CACpD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}