{"ast":null,"code":"// Validation utilities for form inputs\nexport class ValidationUtils{// Name validation (for nombre and apellido)\nstatic validateName(value,fieldName){if(!value||value.trim()===''){return{isValid:false,message:`${fieldName} es requerido`};}const trimmedValue=value.trim();if(trimmedValue.length<2){return{isValid:false,message:`${fieldName} debe tener al menos 2 caracteres`};}if(trimmedValue.length>50){return{isValid:false,message:`${fieldName} no puede exceder 50 caracteres`};}if(!/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$/.test(trimmedValue)){return{isValid:false,message:`${fieldName} solo puede contener letras y espacios`};}// Check for excessive whitespace\nif(/\\s{2,}/.test(trimmedValue)){return{isValid:false,message:`${fieldName} no puede contener espacios múltiples consecutivos`};}// Check for suspicious patterns (basic XSS protection)\nconst suspiciousPatterns=[/<script/i,/javascript:/i,/on\\w+\\s*=/i,/<iframe/i,/eval\\(/i];if(suspiciousPatterns.some(pattern=>pattern.test(value))){return{isValid:false,message:`${fieldName} contiene caracteres no permitidos`};}return{isValid:true};}// Phone number validation (Colombian format)\nstatic validatePhoneNumber(value){if(!value||value.trim()===''){return{isValid:false,message:'El número celular es requerido'};}const cleanPhone=value.replace(/\\D/g,'');if(cleanPhone.length!==10){return{isValid:false,message:'El número celular debe tener exactamente 10 dígitos'};}if(!cleanPhone.startsWith('3')){return{isValid:false,message:'El número celular debe comenzar con 3'};}return{isValid:true};}// City validation\nstatic validateCity(value){if(!value||value.trim()===''){return{isValid:false,message:'La ciudad es requerida'};}const trimmedValue=value.trim();if(trimmedValue.length<2){return{isValid:false,message:'La ciudad debe tener al menos 2 caracteres'};}if(trimmedValue.length>50){return{isValid:false,message:'La ciudad no puede exceder 50 caracteres'};}if(!/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$/.test(trimmedValue)){return{isValid:false,message:'La ciudad solo puede contener letras y espacios'};}// Check for excessive whitespace\nif(/\\s{2,}/.test(trimmedValue)){return{isValid:false,message:'La ciudad no puede contener espacios múltiples consecutivos'};}return{isValid:true};}// Course validation\nstatic validateCourse(value){if(!value||value.trim()===''){return{isValid:false,message:'Debe seleccionar un curso'};}const validCourses=['Sanación de las familias','Angelología'];if(!validCourses.includes(value.trim())){return{isValid:false,message:'Curso no válido'};}return{isValid:true};}// Email validation\nstatic validateEmail(value){if(!value||value.trim()===''){return{isValid:false,message:'El correo electrónico es requerido'};}const emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;if(!emailRegex.test(value.trim())){return{isValid:false,message:'Ingresa un correo electrónico válido'};}return{isValid:true};}// Password validation\nstatic validatePassword(value){if(!value||value.trim()===''){return{isValid:false,message:'La contraseña es requerida'};}return{isValid:true};}// Payment status validation\nstatic validatePaymentStatus(value){if(!value||value.trim()===''){return{isValid:false,message:'Debe seleccionar un estado de pago'};}const validStatuses=['pendiente','parcial','completo'];if(!validStatuses.includes(value)){return{isValid:false,message:'Estado de pago no válido'};}return{isValid:true};}// Payment amount validation\nstatic validatePaymentAmount(value){if(!value||value.trim()===''){return{isValid:false,message:'La cantidad es requerida'};}const amount=parseFloat(value);if(isNaN(amount)){return{isValid:false,message:'La cantidad debe ser un número válido'};}if(amount<0){return{isValid:false,message:'La cantidad no puede ser negativa'};}if(amount>10000000){return{isValid:false,message:'La cantidad no puede exceder $10,000,000'};}return{isValid:true};}// Real-time input sanitization\nstatic sanitizePhoneInput(value){// Only allow digits and limit to 10 characters\nconst digits=value.replace(/\\D/g,'');return digits.slice(0,10);}static sanitizeNameInput(value){// Allow letters, spaces, and accented characters, then replace multiple spaces with single space\nreturn value.replace(/[^a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]/g,'').replace(/\\s+/g,' ').slice(0,50);}// Enhanced validation for edge cases\nstatic validateFormData(data){const errors={};// Check for null/undefined values\nObject.keys(data).forEach(key=>{if(data[key]===null||data[key]===undefined){errors[key]=`${key} no puede estar vacío`;}});// Check for extremely long values (potential DoS attack)\nObject.keys(data).forEach(key=>{if(typeof data[key]==='string'&&data[key].length>1000){errors[key]=`${key} excede la longitud máxima permitida`;}});return{isValid:Object.keys(errors).length===0,errors};}// Rate limiting helper for validation\nstatic createRateLimiter(maxAttempts,windowMs){const attempts=new Map();return identifier=>{const now=Date.now();const userAttempts=attempts.get(identifier);if(!userAttempts||now>userAttempts.resetTime){attempts.set(identifier,{count:1,resetTime:now+windowMs});return true;}if(userAttempts.count>=maxAttempts){return false;}userAttempts.count++;return true;};}static sanitizeAmountInput(value){// Allow digits and one decimal point\nconst sanitized=value.replace(/[^0-9.]/g,'');const parts=sanitized.split('.');if(parts.length>2){return parts[0]+'.'+parts.slice(1).join('');}return sanitized;}}// Export individual validation functions for easier use\nexport const{validateName,validatePhoneNumber,validateCity,validateCourse,validateEmail,validatePassword,validatePaymentStatus,validatePaymentAmount,sanitizePhoneInput,sanitizeNameInput,sanitizeAmountInput}=ValidationUtils;","map":{"version":3,"names":["ValidationUtils","validateName","value","fieldName","trim","isValid","message","trimmedValue","length","test","suspiciousPatterns","some","pattern","validatePhoneNumber","cleanPhone","replace","startsWith","validateCity","validateCourse","validCourses","includes","validateEmail","emailRegex","validatePassword","validatePaymentStatus","validStatuses","validatePaymentAmount","amount","parseFloat","isNaN","sanitizePhoneInput","digits","slice","sanitizeNameInput","validateFormData","data","errors","Object","keys","forEach","key","undefined","createRateLimiter","maxAttempts","windowMs","attempts","Map","identifier","now","Date","userAttempts","get","resetTime","set","count","sanitizeAmountInput","sanitized","parts","split","join"],"sources":["/home/joserodriguez/educonnect/frontend/src/utils/validation.ts"],"sourcesContent":["// Validation utilities for form inputs\n\nexport interface ValidationResult {\n  isValid: boolean;\n  message?: string;\n}\n\nexport class ValidationUtils {\n  // Name validation (for nombre and apellido)\n  static validateName(value: string, fieldName: string): ValidationResult {\n    if (!value || value.trim() === '') {\n      return { isValid: false, message: `${fieldName} es requerido` };\n    }\n    \n    const trimmedValue = value.trim();\n    \n    if (trimmedValue.length < 2) {\n      return { isValid: false, message: `${fieldName} debe tener al menos 2 caracteres` };\n    }\n    \n    if (trimmedValue.length > 50) {\n      return { isValid: false, message: `${fieldName} no puede exceder 50 caracteres` };\n    }\n    \n    if (!/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$/.test(trimmedValue)) {\n      return { isValid: false, message: `${fieldName} solo puede contener letras y espacios` };\n    }\n    \n    // Check for excessive whitespace\n    if (/\\s{2,}/.test(trimmedValue)) {\n      return { isValid: false, message: `${fieldName} no puede contener espacios múltiples consecutivos` };\n    }\n    \n    // Check for suspicious patterns (basic XSS protection)\n    const suspiciousPatterns = [\n      /<script/i,\n      /javascript:/i,\n      /on\\w+\\s*=/i,\n      /<iframe/i,\n      /eval\\(/i\n    ];\n    \n    if (suspiciousPatterns.some(pattern => pattern.test(value))) {\n      return { isValid: false, message: `${fieldName} contiene caracteres no permitidos` };\n    }\n    \n    return { isValid: true };\n  }\n\n  // Phone number validation (Colombian format)\n  static validatePhoneNumber(value: string): ValidationResult {\n    if (!value || value.trim() === '') {\n      return { isValid: false, message: 'El número celular es requerido' };\n    }\n    \n    const cleanPhone = value.replace(/\\D/g, '');\n    \n    if (cleanPhone.length !== 10) {\n      return { isValid: false, message: 'El número celular debe tener exactamente 10 dígitos' };\n    }\n    \n    if (!cleanPhone.startsWith('3')) {\n      return { isValid: false, message: 'El número celular debe comenzar con 3' };\n    }\n    \n    return { isValid: true };\n  }\n\n  // City validation\n  static validateCity(value: string): ValidationResult {\n    if (!value || value.trim() === '') {\n      return { isValid: false, message: 'La ciudad es requerida' };\n    }\n    \n    const trimmedValue = value.trim();\n    \n    if (trimmedValue.length < 2) {\n      return { isValid: false, message: 'La ciudad debe tener al menos 2 caracteres' };\n    }\n    \n    if (trimmedValue.length > 50) {\n      return { isValid: false, message: 'La ciudad no puede exceder 50 caracteres' };\n    }\n    \n    if (!/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$/.test(trimmedValue)) {\n      return { isValid: false, message: 'La ciudad solo puede contener letras y espacios' };\n    }\n    \n    // Check for excessive whitespace\n    if (/\\s{2,}/.test(trimmedValue)) {\n      return { isValid: false, message: 'La ciudad no puede contener espacios múltiples consecutivos' };\n    }\n    \n    return { isValid: true };\n  }\n\n  // Course validation\n  static validateCourse(value: string): ValidationResult {\n    if (!value || value.trim() === '') {\n      return { isValid: false, message: 'Debe seleccionar un curso' };\n    }\n    \n    const validCourses = ['Sanación de las familias', 'Angelología'];\n    if (!validCourses.includes(value.trim())) {\n      return { isValid: false, message: 'Curso no válido' };\n    }\n    \n    return { isValid: true };\n  }\n\n  // Email validation\n  static validateEmail(value: string): ValidationResult {\n    if (!value || value.trim() === '') {\n      return { isValid: false, message: 'El correo electrónico es requerido' };\n    }\n    \n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(value.trim())) {\n      return { isValid: false, message: 'Ingresa un correo electrónico válido' };\n    }\n    \n    return { isValid: true };\n  }\n\n  // Password validation\n  static validatePassword(value: string): ValidationResult {\n    if (!value || value.trim() === '') {\n      return { isValid: false, message: 'La contraseña es requerida' };\n    }\n    \n    return { isValid: true };\n  }\n\n  // Payment status validation\n  static validatePaymentStatus(value: string): ValidationResult {\n    if (!value || value.trim() === '') {\n      return { isValid: false, message: 'Debe seleccionar un estado de pago' };\n    }\n    \n    const validStatuses = ['pendiente', 'parcial', 'completo'];\n    if (!validStatuses.includes(value)) {\n      return { isValid: false, message: 'Estado de pago no válido' };\n    }\n    \n    return { isValid: true };\n  }\n\n  // Payment amount validation\n  static validatePaymentAmount(value: string): ValidationResult {\n    if (!value || value.trim() === '') {\n      return { isValid: false, message: 'La cantidad es requerida' };\n    }\n    \n    const amount = parseFloat(value);\n    if (isNaN(amount)) {\n      return { isValid: false, message: 'La cantidad debe ser un número válido' };\n    }\n    \n    if (amount < 0) {\n      return { isValid: false, message: 'La cantidad no puede ser negativa' };\n    }\n    \n    if (amount > 10000000) {\n      return { isValid: false, message: 'La cantidad no puede exceder $10,000,000' };\n    }\n    \n    return { isValid: true };\n  }\n\n  // Real-time input sanitization\n  static sanitizePhoneInput(value: string): string {\n    // Only allow digits and limit to 10 characters\n    const digits = value.replace(/\\D/g, '');\n    return digits.slice(0, 10);\n  }\n\n  static sanitizeNameInput(value: string): string {\n    // Allow letters, spaces, and accented characters, then replace multiple spaces with single space\n    return value.replace(/[^a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]/g, '').replace(/\\s+/g, ' ').slice(0, 50);\n  }\n\n  // Enhanced validation for edge cases\n  static validateFormData(data: Record<string, any>): { isValid: boolean; errors: Record<string, string> } {\n    const errors: Record<string, string> = {};\n\n    // Check for null/undefined values\n    Object.keys(data).forEach(key => {\n      if (data[key] === null || data[key] === undefined) {\n        errors[key] = `${key} no puede estar vacío`;\n      }\n    });\n\n    // Check for extremely long values (potential DoS attack)\n    Object.keys(data).forEach(key => {\n      if (typeof data[key] === 'string' && data[key].length > 1000) {\n        errors[key] = `${key} excede la longitud máxima permitida`;\n      }\n    });\n\n    return {\n      isValid: Object.keys(errors).length === 0,\n      errors\n    };\n  }\n\n  // Rate limiting helper for validation\n  static createRateLimiter(maxAttempts: number, windowMs: number) {\n    const attempts = new Map<string, { count: number; resetTime: number }>();\n\n    return (identifier: string): boolean => {\n      const now = Date.now();\n      const userAttempts = attempts.get(identifier);\n\n      if (!userAttempts || now > userAttempts.resetTime) {\n        attempts.set(identifier, { count: 1, resetTime: now + windowMs });\n        return true;\n      }\n\n      if (userAttempts.count >= maxAttempts) {\n        return false;\n      }\n\n      userAttempts.count++;\n      return true;\n    };\n  }\n\n  static sanitizeAmountInput(value: string): string {\n    // Allow digits and one decimal point\n    const sanitized = value.replace(/[^0-9.]/g, '');\n    const parts = sanitized.split('.');\n    if (parts.length > 2) {\n      return parts[0] + '.' + parts.slice(1).join('');\n    }\n    return sanitized;\n  }\n}\n\n// Export individual validation functions for easier use\nexport const {\n  validateName,\n  validatePhoneNumber,\n  validateCity,\n  validateCourse,\n  validateEmail,\n  validatePassword,\n  validatePaymentStatus,\n  validatePaymentAmount,\n  sanitizePhoneInput,\n  sanitizeNameInput,\n  sanitizeAmountInput\n} = ValidationUtils;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}