{"ast":null,"code":"/**\n * Utility functions for formatting data\n *//**\n * Formats a name to proper case (first letter of each word capitalized)\n * Example: \"jose eduardo rodriguez\" -> \"Jose Eduardo Rodriguez\"\n */export const formatName=name=>{if(!name||typeof name!=='string'){return'';}return name.toLowerCase().split(' ').map(word=>{if(word.length===0)return word;return word.charAt(0).toUpperCase()+word.slice(1);}).join(' ').trim();};/**\n * Formats full name (first name + last name)\n * Example: formatFullName(\"jose eduardo\", \"rodriguez ruiz\") -> \"Jose Eduardo Rodriguez Ruiz\"\n */export const formatFullName=(firstName,lastName)=>{const formattedFirst=formatName(firstName);const formattedLast=formatName(lastName);if(!formattedFirst&&!formattedLast){return'';}if(!formattedFirst){return formattedLast;}if(!formattedLast){return formattedFirst;}return`${formattedFirst} ${formattedLast}`;};/**\n * Formats currency to Colombian Pesos\n * Example: 50000 -> \"$50.000\"\n */export const formatCurrency=amount=>{if(typeof amount!=='number'||isNaN(amount)){return'$0';}return new Intl.NumberFormat('es-CO',{style:'currency',currency:'COP',minimumFractionDigits:0,maximumFractionDigits:0}).format(amount);};/**\n * Formats date to Colombian format\n * Example: \"2024-01-15\" -> \"15 ene 2024\"\n */export const formatDate=dateString=>{if(!dateString){return'';}try{return new Date(dateString).toLocaleDateString('es-CO',{year:'numeric',month:'short',day:'numeric'});}catch(error){return dateString;}};/**\n * Formats phone number for display\n * Example: \"3001234567\" -> \"300 123 4567\"\n */export const formatPhoneNumber=phone=>{if(!phone||typeof phone!=='string'){return'';}// Remove any non-digit characters\nconst cleanPhone=phone.replace(/\\D/g,'');// Format as XXX XXX XXXX if it's 10 digits\nif(cleanPhone.length===10){return`${cleanPhone.slice(0,3)} ${cleanPhone.slice(3,6)} ${cleanPhone.slice(6)}`;}// Return original if not 10 digits\nreturn phone;};/**\n * Capitalizes first letter of a string\n * Example: \"pendiente\" -> \"Pendiente\"\n */export const capitalize=str=>{if(!str||typeof str!=='string'){return'';}return str.charAt(0).toUpperCase()+str.slice(1).toLowerCase();};","map":{"version":3,"names":["formatName","name","toLowerCase","split","map","word","length","charAt","toUpperCase","slice","join","trim","formatFullName","firstName","lastName","formattedFirst","formattedLast","formatCurrency","amount","isNaN","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatDate","dateString","Date","toLocaleDateString","year","month","day","error","formatPhoneNumber","phone","cleanPhone","replace","capitalize","str"],"sources":["/home/joserodriguez/educonnect/frontend/src/utils/formatters.ts"],"sourcesContent":["/**\n * Utility functions for formatting data\n */\n\n/**\n * Formats a name to proper case (first letter of each word capitalized)\n * Example: \"jose eduardo rodriguez\" -> \"Jose Eduardo Rodriguez\"\n */\nexport const formatName = (name: string): string => {\n  if (!name || typeof name !== 'string') {\n    return '';\n  }\n\n  return name\n    .toLowerCase()\n    .split(' ')\n    .map(word => {\n      if (word.length === 0) return word;\n      return word.charAt(0).toUpperCase() + word.slice(1);\n    })\n    .join(' ')\n    .trim();\n};\n\n/**\n * Formats full name (first name + last name)\n * Example: formatFullName(\"jose eduardo\", \"rodriguez ruiz\") -> \"Jose Eduardo Rodriguez Ruiz\"\n */\nexport const formatFullName = (firstName: string, lastName: string): string => {\n  const formattedFirst = formatName(firstName);\n  const formattedLast = formatName(lastName);\n  \n  if (!formattedFirst && !formattedLast) {\n    return '';\n  }\n  \n  if (!formattedFirst) {\n    return formattedLast;\n  }\n  \n  if (!formattedLast) {\n    return formattedFirst;\n  }\n  \n  return `${formattedFirst} ${formattedLast}`;\n};\n\n/**\n * Formats currency to Colombian Pesos\n * Example: 50000 -> \"$50.000\"\n */\nexport const formatCurrency = (amount: number): string => {\n  if (typeof amount !== 'number' || isNaN(amount)) {\n    return '$0';\n  }\n\n  return new Intl.NumberFormat('es-CO', {\n    style: 'currency',\n    currency: 'COP',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n};\n\n/**\n * Formats date to Colombian format\n * Example: \"2024-01-15\" -> \"15 ene 2024\"\n */\nexport const formatDate = (dateString: string): string => {\n  if (!dateString) {\n    return '';\n  }\n\n  try {\n    return new Date(dateString).toLocaleDateString('es-CO', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  } catch (error) {\n    return dateString;\n  }\n};\n\n/**\n * Formats phone number for display\n * Example: \"3001234567\" -> \"300 123 4567\"\n */\nexport const formatPhoneNumber = (phone: string): string => {\n  if (!phone || typeof phone !== 'string') {\n    return '';\n  }\n\n  // Remove any non-digit characters\n  const cleanPhone = phone.replace(/\\D/g, '');\n  \n  // Format as XXX XXX XXXX if it's 10 digits\n  if (cleanPhone.length === 10) {\n    return `${cleanPhone.slice(0, 3)} ${cleanPhone.slice(3, 6)} ${cleanPhone.slice(6)}`;\n  }\n  \n  // Return original if not 10 digits\n  return phone;\n};\n\n/**\n * Capitalizes first letter of a string\n * Example: \"pendiente\" -> \"Pendiente\"\n */\nexport const capitalize = (str: string): string => {\n  if (!str || typeof str !== 'string') {\n    return '';\n  }\n  \n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}