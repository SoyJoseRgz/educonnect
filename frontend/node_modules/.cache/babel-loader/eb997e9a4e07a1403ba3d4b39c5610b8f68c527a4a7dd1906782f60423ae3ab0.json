{"ast":null,"code":"/**\n * Utility functions for formatting data\n */\n\n/**\n * Formats a name to proper case (first letter of each word capitalized)\n * Example: \"jose eduardo rodriguez\" -> \"Jose Eduardo Rodriguez\"\n */\nexport const formatName = name => {\n  if (!name || typeof name !== 'string') {\n    return '';\n  }\n  return name.toLowerCase().split(' ').map(word => {\n    if (word.length === 0) return word;\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }).join(' ').trim();\n};\n\n/**\n * Formats full name (first name + last name)\n * Example: formatFullName(\"jose eduardo\", \"rodriguez ruiz\") -> \"Jose Eduardo Rodriguez Ruiz\"\n */\nexport const formatFullName = (firstName, lastName) => {\n  const formattedFirst = formatName(firstName);\n  const formattedLast = formatName(lastName);\n  if (!formattedFirst && !formattedLast) {\n    return '';\n  }\n  if (!formattedFirst) {\n    return formattedLast;\n  }\n  if (!formattedLast) {\n    return formattedFirst;\n  }\n  return `${formattedFirst} ${formattedLast}`;\n};\n\n/**\n * Formats currency to Colombian Pesos\n * Example: 50000 -> \"$50.000\"\n */\nexport const formatCurrency = amount => {\n  if (typeof amount !== 'number' || isNaN(amount)) {\n    return '$0';\n  }\n  return new Intl.NumberFormat('es-CO', {\n    style: 'currency',\n    currency: 'COP',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(amount);\n};\n\n/**\n * Formats date to Colombian format\n * Example: \"2024-01-15\" -> \"15 ene 2024\"\n */\nexport const formatDate = dateString => {\n  if (!dateString) {\n    return '';\n  }\n  try {\n    return new Date(dateString).toLocaleDateString('es-CO', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  } catch (error) {\n    return dateString;\n  }\n};\n\n/**\n * Formats phone number for display\n * Example: \"3001234567\" -> \"300 123 4567\"\n */\nexport const formatPhoneNumber = phone => {\n  if (!phone || typeof phone !== 'string') {\n    return '';\n  }\n\n  // Remove any non-digit characters\n  const cleanPhone = phone.replace(/\\D/g, '');\n\n  // Format as XXX XXX XXXX if it's 10 digits\n  if (cleanPhone.length === 10) {\n    return `${cleanPhone.slice(0, 3)} ${cleanPhone.slice(3, 6)} ${cleanPhone.slice(6)}`;\n  }\n\n  // Return original if not 10 digits\n  return phone;\n};\n\n/**\n * Capitalizes first letter of a string\n * Example: \"pendiente\" -> \"Pendiente\"\n */\nexport const capitalize = str => {\n  if (!str || typeof str !== 'string') {\n    return '';\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n};","map":{"version":3,"names":["formatName","name","toLowerCase","split","map","word","length","charAt","toUpperCase","slice","join","trim","formatFullName","firstName","lastName","formattedFirst","formattedLast","formatCurrency","amount","isNaN","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatDate","dateString","Date","toLocaleDateString","year","month","day","error","formatPhoneNumber","phone","cleanPhone","replace","capitalize","str"],"sources":["/home/joserodriguez/educonnect/frontend/src/utils/formatters.ts"],"sourcesContent":["/**\n * Utility functions for formatting data\n */\n\n/**\n * Formats a name to proper case (first letter of each word capitalized)\n * Example: \"jose eduardo rodriguez\" -> \"Jose Eduardo Rodriguez\"\n */\nexport const formatName = (name: string): string => {\n  if (!name || typeof name !== 'string') {\n    return '';\n  }\n\n  return name\n    .toLowerCase()\n    .split(' ')\n    .map(word => {\n      if (word.length === 0) return word;\n      return word.charAt(0).toUpperCase() + word.slice(1);\n    })\n    .join(' ')\n    .trim();\n};\n\n/**\n * Formats full name (first name + last name)\n * Example: formatFullName(\"jose eduardo\", \"rodriguez ruiz\") -> \"Jose Eduardo Rodriguez Ruiz\"\n */\nexport const formatFullName = (firstName: string, lastName: string): string => {\n  const formattedFirst = formatName(firstName);\n  const formattedLast = formatName(lastName);\n  \n  if (!formattedFirst && !formattedLast) {\n    return '';\n  }\n  \n  if (!formattedFirst) {\n    return formattedLast;\n  }\n  \n  if (!formattedLast) {\n    return formattedFirst;\n  }\n  \n  return `${formattedFirst} ${formattedLast}`;\n};\n\n/**\n * Formats currency to Colombian Pesos\n * Example: 50000 -> \"$50.000\"\n */\nexport const formatCurrency = (amount: number): string => {\n  if (typeof amount !== 'number' || isNaN(amount)) {\n    return '$0';\n  }\n\n  return new Intl.NumberFormat('es-CO', {\n    style: 'currency',\n    currency: 'COP',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n};\n\n/**\n * Formats date to Colombian format\n * Example: \"2024-01-15\" -> \"15 ene 2024\"\n */\nexport const formatDate = (dateString: string): string => {\n  if (!dateString) {\n    return '';\n  }\n\n  try {\n    return new Date(dateString).toLocaleDateString('es-CO', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  } catch (error) {\n    return dateString;\n  }\n};\n\n/**\n * Formats phone number for display\n * Example: \"3001234567\" -> \"300 123 4567\"\n */\nexport const formatPhoneNumber = (phone: string): string => {\n  if (!phone || typeof phone !== 'string') {\n    return '';\n  }\n\n  // Remove any non-digit characters\n  const cleanPhone = phone.replace(/\\D/g, '');\n  \n  // Format as XXX XXX XXXX if it's 10 digits\n  if (cleanPhone.length === 10) {\n    return `${cleanPhone.slice(0, 3)} ${cleanPhone.slice(3, 6)} ${cleanPhone.slice(6)}`;\n  }\n  \n  // Return original if not 10 digits\n  return phone;\n};\n\n/**\n * Capitalizes first letter of a string\n * Example: \"pendiente\" -> \"Pendiente\"\n */\nexport const capitalize = (str: string): string => {\n  if (!str || typeof str !== 'string') {\n    return '';\n  }\n  \n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}