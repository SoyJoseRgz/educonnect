{"ast":null,"code":"// API Service Layer for EduConnect Frontend\n// Handles all HTTP requests to the backend API\n\nclass ApiService {\n  constructor() {\n    this.baseURL = void 0;\n    // Use proxy configuration from package.json in development\n    // In production, use the full API URL\n    this.baseURL = process.env.NODE_ENV === 'production' ? process.env.REACT_APP_API_URL || '/api' : '/api'; // Proxy will redirect to backend on port 3500\n  }\n\n  // Generic request method with error handling, timeout, and retry logic\n  async request(endpoint, options = {}, retries = 2, timeout = 10000) {\n    const url = `${this.baseURL}${endpoint}`;\n\n    // Create abort controller for timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      credentials: 'include',\n      // Include cookies for session management\n      signal: controller.signal,\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n\n        // Enhanced error handling based on status codes\n        let message = errorData.message || `HTTP ${response.status}: ${response.statusText}`;\n        switch (response.status) {\n          case 400:\n            message = errorData.message || 'Datos inválidos. Verifica la información ingresada.';\n            break;\n          case 401:\n            message = errorData.message || 'No autorizado. Verifica tus credenciales.';\n            break;\n          case 403:\n            message = errorData.message || 'Acceso denegado.';\n            break;\n          case 404:\n            message = errorData.message || 'Recurso no encontrado.';\n            break;\n          case 409:\n            message = errorData.message || 'Conflicto con el estado actual del recurso.';\n            break;\n          case 422:\n            message = errorData.message || 'Error de validación en los datos enviados.';\n            break;\n          case 429:\n            message = 'Demasiadas solicitudes. Intenta nuevamente en unos momentos.';\n            break;\n          case 500:\n            message = 'Error interno del servidor. Intenta nuevamente más tarde.';\n            break;\n          case 502:\n            message = 'Error del servidor. El servicio no está disponible temporalmente.';\n            break;\n          case 503:\n            message = 'Servicio no disponible. Intenta nuevamente más tarde.';\n            break;\n          case 504:\n            message = 'Tiempo de espera agotado. El servidor tardó demasiado en responder.';\n            break;\n          default:\n            message = errorData.message || 'Error inesperado. Intenta nuevamente.';\n        }\n        const error = {\n          message,\n          status: response.status,\n          errors: errorData.errors\n        };\n        throw error;\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      clearTimeout(timeoutId);\n\n      // Handle timeout errors\n      if (error instanceof Error && error.name === 'AbortError') {\n        if (retries > 0) {\n          // Exponential backoff for retries\n          const delay = Math.min(1000 * Math.pow(2, 2 - retries), 5000);\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return this.request(endpoint, options, retries - 1, timeout);\n        }\n        const timeoutError = {\n          message: 'La solicitud tardó demasiado tiempo. Verifica tu conexión a internet.',\n          status: 408\n        };\n        throw timeoutError;\n      }\n\n      // Handle network errors\n      if (error instanceof TypeError && (error.message.includes('fetch') || error.message.includes('network') || error.message.includes('Failed to fetch'))) {\n        if (retries > 0) {\n          // Exponential backoff for network errors\n          const delay = Math.min(1000 * Math.pow(2, 2 - retries), 5000);\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return this.request(endpoint, options, retries - 1, timeout);\n        }\n        const networkError = {\n          message: 'Error de conexión. Verifica tu conexión a internet y vuelve a intentar.',\n          status: 0\n        };\n        throw networkError;\n      }\n\n      // Handle server errors (5xx) with retry\n      if (error instanceof Error && 'status' in error) {\n        const apiError = error;\n        if (apiError.status >= 500 && retries > 0) {\n          // Longer delay for server errors\n          const delay = Math.min(2000 * Math.pow(2, 2 - retries), 10000);\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return this.request(endpoint, options, retries - 1, timeout);\n        }\n      }\n\n      // Handle rate limiting (429) with retry\n      if (error instanceof Error && 'status' in error) {\n        const apiError = error;\n        if (apiError.status === 429 && retries > 0) {\n          // Wait longer for rate limiting\n          const delay = Math.min(5000 * Math.pow(2, 2 - retries), 30000);\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return this.request(endpoint, options, retries - 1, timeout);\n        }\n      }\n      throw error;\n    }\n  }\n\n  // Student API methods\n  async getPublicStudents() {\n    const response = await this.request('/students/public');\n    return response.data || [];\n  }\n  async registerStudent(student) {\n    const response = await this.request('/students', {\n      method: 'POST',\n      body: JSON.stringify(student)\n    });\n    return response.data;\n  }\n  async getAdminStudents() {\n    const response = await this.request('/students/admin');\n    return response.data || [];\n  }\n  async updateStudent(id, student) {\n    const response = await this.request(`/students/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(student)\n    });\n    return response.data;\n  }\n\n  // Authentication API methods\n  async login(credentials) {\n    await this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n  async logout() {\n    await this.request('/auth/logout', {\n      method: 'POST'\n    });\n  }\n  async getCurrentAdmin() {\n    try {\n      const response = await this.request('/auth/me');\n      return response.data;\n    } catch (error) {\n      const apiError = error;\n      // Don't log 401 errors for getCurrentAdmin as they're expected when not authenticated\n      if (apiError.status === 401) {\n        throw error; // Re-throw without logging\n      }\n      // Log other unexpected errors\n      console.error('Unexpected error in getCurrentAdmin:', error);\n      throw error;\n    }\n  }\n\n  // Silent auth check method for initial app load\n  async checkAuthStatus() {\n    try {\n      // Use a more direct approach for auth checking\n      const url = `${this.baseURL}/auth/me`;\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      });\n      if (response.ok) {\n        return true;\n      } else if (response.status === 401) {\n        // Expected when not authenticated - return false silently\n        return false;\n      } else {\n        // Unexpected error - throw it\n        const errorData = await response.json().catch(() => ({}));\n        const error = {\n          message: errorData.message || `HTTP ${response.status}: ${response.statusText}`,\n          status: response.status\n        };\n        throw error;\n      }\n    } catch (error) {\n      // Handle network errors\n      if (error instanceof TypeError && error.message.includes('fetch')) {\n        const networkError = {\n          message: 'Error de conexión. Verifica tu conexión a internet.',\n          status: 0\n        };\n        throw networkError;\n      }\n      throw error;\n    }\n  }\n}\n\n// Create and export a singleton instance\nexport const apiService = new ApiService();\n\n// Export individual methods for easier testing and usage\nexport const studentApi = {\n  getPublicStudents: () => apiService.getPublicStudents(),\n  registerStudent: student => apiService.registerStudent(student),\n  getAdminStudents: () => apiService.getAdminStudents(),\n  updateStudent: (id, student) => apiService.updateStudent(id, student)\n};\nexport const authApi = {\n  login: credentials => apiService.login(credentials),\n  logout: () => apiService.logout(),\n  getCurrentAdmin: () => apiService.getCurrentAdmin(),\n  checkAuthStatus: () => apiService.checkAuthStatus()\n};","map":{"version":3,"names":["ApiService","constructor","baseURL","process","env","NODE_ENV","REACT_APP_API_URL","request","endpoint","options","retries","timeout","url","controller","AbortController","timeoutId","setTimeout","abort","config","headers","credentials","signal","response","fetch","clearTimeout","ok","errorData","json","catch","message","status","statusText","error","errors","data","Error","name","delay","Math","min","pow","Promise","resolve","timeoutError","TypeError","includes","networkError","apiError","getPublicStudents","registerStudent","student","method","body","JSON","stringify","getAdminStudents","updateStudent","id","login","logout","getCurrentAdmin","console","checkAuthStatus","apiService","studentApi","authApi"],"sources":["/home/joserodriguez/educonnect/frontend/src/services/api.ts"],"sourcesContent":["// API Service Layer for EduConnect Frontend\n// Handles all HTTP requests to the backend API\n\nexport interface Student {\n  id?: number;\n  nombre: string;\n  apellido: string;\n  celular: string;\n  ciudad: string;\n  curso: string;\n  estadoPago?: 'pendiente' | 'parcial' | 'completo';\n  cantidadPago?: number;\n  fechaRegistro?: string;\n  fechaActualizacion?: string;\n}\n\nexport interface PublicStudent {\n  id: number;\n  nombre: string;\n  apellido: string;\n  ciudad: string;\n  celular: string;\n  curso: string;\n}\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface ApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  message?: string;\n  errors?: string[];\n}\n\nexport interface BackendValidationError {\n  path: string;\n  msg: string;\n}\n\nexport interface ApiError {\n  message: string;\n  status: number;\n  errors?: BackendValidationError[];\n}\n\nclass ApiService {\n  private baseURL: string;\n\n  constructor() {\n    // Use proxy configuration from package.json in development\n    // In production, use the full API URL\n    this.baseURL = process.env.NODE_ENV === 'production' \n      ? process.env.REACT_APP_API_URL || '/api'\n      : '/api'; // Proxy will redirect to backend on port 3500\n  }\n\n  // Generic request method with error handling, timeout, and retry logic\n  private async request<T>(\n    endpoint: string, \n    options: RequestInit = {},\n    retries: number = 2,\n    timeout: number = 10000\n  ): Promise<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    // Create abort controller for timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n    \n    const config: RequestInit = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      credentials: 'include', // Include cookies for session management\n      signal: controller.signal,\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        \n        // Enhanced error handling based on status codes\n        let message = errorData.message || `HTTP ${response.status}: ${response.statusText}`;\n        \n        switch (response.status) {\n          case 400:\n            message = errorData.message || 'Datos inválidos. Verifica la información ingresada.';\n            break;\n          case 401:\n            message = errorData.message || 'No autorizado. Verifica tus credenciales.';\n            break;\n          case 403:\n            message = errorData.message || 'Acceso denegado.';\n            break;\n          case 404:\n            message = errorData.message || 'Recurso no encontrado.';\n            break;\n          case 409:\n            message = errorData.message || 'Conflicto con el estado actual del recurso.';\n            break;\n          case 422:\n            message = errorData.message || 'Error de validación en los datos enviados.';\n            break;\n          case 429:\n            message = 'Demasiadas solicitudes. Intenta nuevamente en unos momentos.';\n            break;\n          case 500:\n            message = 'Error interno del servidor. Intenta nuevamente más tarde.';\n            break;\n          case 502:\n            message = 'Error del servidor. El servicio no está disponible temporalmente.';\n            break;\n          case 503:\n            message = 'Servicio no disponible. Intenta nuevamente más tarde.';\n            break;\n          case 504:\n            message = 'Tiempo de espera agotado. El servidor tardó demasiado en responder.';\n            break;\n          default:\n            message = errorData.message || 'Error inesperado. Intenta nuevamente.';\n        }\n        \n        const error: ApiError = {\n          message,\n          status: response.status,\n          errors: errorData.errors,\n        };\n        throw error;\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      clearTimeout(timeoutId);\n      \n      // Handle timeout errors\n      if (error instanceof Error && error.name === 'AbortError') {\n        if (retries > 0) {\n          // Exponential backoff for retries\n          const delay = Math.min(1000 * Math.pow(2, 2 - retries), 5000);\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return this.request<T>(endpoint, options, retries - 1, timeout);\n        }\n        \n        const timeoutError: ApiError = {\n          message: 'La solicitud tardó demasiado tiempo. Verifica tu conexión a internet.',\n          status: 408,\n        };\n        throw timeoutError;\n      }\n      \n      // Handle network errors\n      if (error instanceof TypeError && (\n        error.message.includes('fetch') || \n        error.message.includes('network') ||\n        error.message.includes('Failed to fetch')\n      )) {\n        if (retries > 0) {\n          // Exponential backoff for network errors\n          const delay = Math.min(1000 * Math.pow(2, 2 - retries), 5000);\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return this.request<T>(endpoint, options, retries - 1, timeout);\n        }\n        \n        const networkError: ApiError = {\n          message: 'Error de conexión. Verifica tu conexión a internet y vuelve a intentar.',\n          status: 0,\n        };\n        throw networkError;\n      }\n      \n      // Handle server errors (5xx) with retry\n      if (error instanceof Error && 'status' in error) {\n        const apiError = error as ApiError;\n        if (apiError.status >= 500 && retries > 0) {\n          // Longer delay for server errors\n          const delay = Math.min(2000 * Math.pow(2, 2 - retries), 10000);\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return this.request<T>(endpoint, options, retries - 1, timeout);\n        }\n      }\n      \n      // Handle rate limiting (429) with retry\n      if (error instanceof Error && 'status' in error) {\n        const apiError = error as ApiError;\n        if (apiError.status === 429 && retries > 0) {\n          // Wait longer for rate limiting\n          const delay = Math.min(5000 * Math.pow(2, 2 - retries), 30000);\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return this.request<T>(endpoint, options, retries - 1, timeout);\n        }\n      }\n      \n      throw error;\n    }\n  }\n\n  // Student API methods\n  async getPublicStudents(): Promise<PublicStudent[]> {\n    const response = await this.request<ApiResponse<PublicStudent[]>>('/students/public');\n    return response.data || [];\n  }\n\n  async registerStudent(student: Omit<Student, 'id' | 'estadoPago' | 'cantidadPago' | 'fechaRegistro' | 'fechaActualizacion'>): Promise<Student> {\n    const response = await this.request<ApiResponse<Student>>('/students', {\n      method: 'POST',\n      body: JSON.stringify(student),\n    });\n    return response.data!;\n  }\n\n  async getAdminStudents(): Promise<Student[]> {\n    const response = await this.request<ApiResponse<Student[]>>('/students/admin');\n    return response.data || [];\n  }\n\n  async updateStudent(id: number, student: Partial<Student>): Promise<Student> {\n    const response = await this.request<ApiResponse<Student>>(`/students/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(student),\n    });\n    return response.data!;\n  }\n\n  // Authentication API methods\n  async login(credentials: LoginCredentials): Promise<void> {\n    await this.request<ApiResponse>('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials),\n    });\n  }\n\n  async logout(): Promise<void> {\n    await this.request<ApiResponse>('/auth/logout', {\n      method: 'POST',\n    });\n  }\n\n  async getCurrentAdmin(): Promise<any> {\n    try {\n      const response = await this.request<ApiResponse>('/auth/me');\n      return response.data;\n    } catch (error) {\n      const apiError = error as ApiError;\n      // Don't log 401 errors for getCurrentAdmin as they're expected when not authenticated\n      if (apiError.status === 401) {\n        throw error; // Re-throw without logging\n      }\n      // Log other unexpected errors\n      console.error('Unexpected error in getCurrentAdmin:', error);\n      throw error;\n    }\n  }\n\n  // Silent auth check method for initial app load\n  async checkAuthStatus(): Promise<boolean> {\n    try {\n      // Use a more direct approach for auth checking\n      const url = `${this.baseURL}/auth/me`;\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n      });\n\n      if (response.ok) {\n        return true;\n      } else if (response.status === 401) {\n        // Expected when not authenticated - return false silently\n        return false;\n      } else {\n        // Unexpected error - throw it\n        const errorData = await response.json().catch(() => ({}));\n        const error: ApiError = {\n          message: errorData.message || `HTTP ${response.status}: ${response.statusText}`,\n          status: response.status,\n        };\n        throw error;\n      }\n    } catch (error) {\n      // Handle network errors\n      if (error instanceof TypeError && error.message.includes('fetch')) {\n        const networkError: ApiError = {\n          message: 'Error de conexión. Verifica tu conexión a internet.',\n          status: 0,\n        };\n        throw networkError;\n      }\n      throw error;\n    }\n  }\n}\n\n// Create and export a singleton instance\nexport const apiService = new ApiService();\n\n// Export individual methods for easier testing and usage\nexport const studentApi = {\n  getPublicStudents: () => apiService.getPublicStudents(),\n  registerStudent: (student: Omit<Student, 'id' | 'estadoPago' | 'cantidadPago' | 'fechaRegistro' | 'fechaActualizacion'>) => \n    apiService.registerStudent(student),\n  getAdminStudents: () => apiService.getAdminStudents(),\n  updateStudent: (id: number, student: Partial<Student>) => \n    apiService.updateStudent(id, student),\n};\n\nexport const authApi = {\n  login: (credentials: LoginCredentials) => apiService.login(credentials),\n  logout: () => apiService.logout(),\n  getCurrentAdmin: () => apiService.getCurrentAdmin(),\n  checkAuthStatus: () => apiService.checkAuthStatus(),\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}