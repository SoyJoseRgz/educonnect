{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nexport const useNetworkStatus = () => {\n  _s();\n  const [networkStatus, setNetworkStatus] = useState({\n    isOnline: navigator.onLine,\n    isSlowConnection: false,\n    connectionType: 'unknown'\n  });\n  const [lastOnlineTime, setLastOnlineTime] = useState(navigator.onLine ? new Date() : null);\n  const [offlineDuration, setOfflineDuration] = useState(0);\n\n  // Get connection information if available\n  const getConnectionInfo = useCallback(() => {\n    // @ts-ignore - NetworkInformation is not fully supported in TypeScript\n    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n    if (connection) {\n      return {\n        connectionType: connection.type || connection.effectiveType || 'unknown',\n        downlink: connection.downlink,\n        effectiveType: connection.effectiveType,\n        isSlowConnection: connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g' || connection.downlink && connection.downlink < 0.5\n      };\n    }\n    return {\n      connectionType: 'unknown',\n      isSlowConnection: false\n    };\n  }, []);\n\n  // Update network status\n  const updateNetworkStatus = useCallback(() => {\n    const isOnline = navigator.onLine;\n    const connectionInfo = getConnectionInfo();\n    setNetworkStatus(prev => ({\n      ...prev,\n      isOnline,\n      ...connectionInfo\n    }));\n    if (isOnline) {\n      setLastOnlineTime(new Date());\n      setOfflineDuration(0);\n    }\n  }, [getConnectionInfo]);\n\n  // Retry connection by attempting a simple fetch\n  const retryConnection = useCallback(async () => {\n    try {\n      // Try to fetch a small resource to test connectivity\n      const response = await fetch('/favicon.ico', {\n        method: 'HEAD',\n        cache: 'no-cache'\n      });\n      if (response.ok) {\n        updateNetworkStatus();\n      }\n    } catch (error) {\n      // Connection still not available\n      console.warn('Connection retry failed:', error);\n    }\n  }, [updateNetworkStatus]);\n  useEffect(() => {\n    // Initial setup\n    updateNetworkStatus();\n\n    // Event listeners for online/offline events\n    const handleOnline = () => {\n      updateNetworkStatus();\n    };\n    const handleOffline = () => {\n      updateNetworkStatus();\n    };\n\n    // Connection change listener (if supported)\n    const handleConnectionChange = () => {\n      updateNetworkStatus();\n    };\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // @ts-ignore - NetworkInformation is not fully supported in TypeScript\n    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n    if (connection) {\n      connection.addEventListener('change', handleConnectionChange);\n    }\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n      if (connection) {\n        connection.removeEventListener('change', handleConnectionChange);\n      }\n    };\n  }, [updateNetworkStatus]);\n\n  // Separate useEffect for offline duration tracking\n  useEffect(() => {\n    if (!networkStatus.isOnline && lastOnlineTime) {\n      const interval = setInterval(() => {\n        const duration = Math.floor((Date.now() - lastOnlineTime.getTime()) / 1000);\n        setOfflineDuration(duration);\n      }, 1000);\n      return () => clearInterval(interval);\n    } else {\n      setOfflineDuration(0);\n    }\n  }, [networkStatus.isOnline, lastOnlineTime]);\n  return {\n    ...networkStatus,\n    retryConnection,\n    lastOnlineTime,\n    offlineDuration\n  };\n};\n_s(useNetworkStatus, \"b+F9h3Q8MoTv8hQdK198bgQbmLk=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useNetworkStatus","_s","networkStatus","setNetworkStatus","isOnline","navigator","onLine","isSlowConnection","connectionType","lastOnlineTime","setLastOnlineTime","Date","offlineDuration","setOfflineDuration","getConnectionInfo","connection","mozConnection","webkitConnection","type","effectiveType","downlink","updateNetworkStatus","connectionInfo","prev","retryConnection","response","fetch","method","cache","ok","error","console","warn","handleOnline","handleOffline","handleConnectionChange","window","addEventListener","removeEventListener","interval","setInterval","duration","Math","floor","now","getTime","clearInterval"],"sources":["/home/joserodriguez/educonnect/frontend/src/hooks/useNetworkStatus.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\ninterface NetworkStatus {\n  isOnline: boolean;\n  isSlowConnection: boolean;\n  connectionType: string;\n  downlink?: number;\n  effectiveType?: string;\n}\n\ninterface UseNetworkStatusReturn extends NetworkStatus {\n  retryConnection: () => void;\n  lastOnlineTime: Date | null;\n  offlineDuration: number; // in seconds\n}\n\nexport const useNetworkStatus = (): UseNetworkStatusReturn => {\n  const [networkStatus, setNetworkStatus] = useState<NetworkStatus>({\n    isOnline: navigator.onLine,\n    isSlowConnection: false,\n    connectionType: 'unknown',\n  });\n  \n  const [lastOnlineTime, setLastOnlineTime] = useState<Date | null>(\n    navigator.onLine ? new Date() : null\n  );\n  \n  const [offlineDuration, setOfflineDuration] = useState(0);\n\n  // Get connection information if available\n  const getConnectionInfo = useCallback((): Partial<NetworkStatus> => {\n    // @ts-ignore - NetworkInformation is not fully supported in TypeScript\n    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n    \n    if (connection) {\n      return {\n        connectionType: connection.type || connection.effectiveType || 'unknown',\n        downlink: connection.downlink,\n        effectiveType: connection.effectiveType,\n        isSlowConnection: connection.effectiveType === 'slow-2g' || \n                         connection.effectiveType === '2g' ||\n                         (connection.downlink && connection.downlink < 0.5),\n      };\n    }\n    \n    return {\n      connectionType: 'unknown',\n      isSlowConnection: false,\n    };\n  }, []);\n\n  // Update network status\n  const updateNetworkStatus = useCallback(() => {\n    const isOnline = navigator.onLine;\n    const connectionInfo = getConnectionInfo();\n\n    setNetworkStatus(prev => ({\n      ...prev,\n      isOnline,\n      ...connectionInfo,\n    }));\n\n    if (isOnline) {\n      setLastOnlineTime(new Date());\n      setOfflineDuration(0);\n    }\n  }, [getConnectionInfo]);\n\n  // Retry connection by attempting a simple fetch\n  const retryConnection = useCallback(async () => {\n    try {\n      // Try to fetch a small resource to test connectivity\n      const response = await fetch('/favicon.ico', {\n        method: 'HEAD',\n        cache: 'no-cache',\n      });\n      \n      if (response.ok) {\n        updateNetworkStatus();\n      }\n    } catch (error) {\n      // Connection still not available\n      console.warn('Connection retry failed:', error);\n    }\n  }, [updateNetworkStatus]);\n\n  useEffect(() => {\n    // Initial setup\n    updateNetworkStatus();\n\n    // Event listeners for online/offline events\n    const handleOnline = () => {\n      updateNetworkStatus();\n    };\n\n    const handleOffline = () => {\n      updateNetworkStatus();\n    };\n\n    // Connection change listener (if supported)\n    const handleConnectionChange = () => {\n      updateNetworkStatus();\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // @ts-ignore - NetworkInformation is not fully supported in TypeScript\n    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n    if (connection) {\n      connection.addEventListener('change', handleConnectionChange);\n    }\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n\n      if (connection) {\n        connection.removeEventListener('change', handleConnectionChange);\n      }\n    };\n  }, [updateNetworkStatus]);\n\n  // Separate useEffect for offline duration tracking\n  useEffect(() => {\n    if (!networkStatus.isOnline && lastOnlineTime) {\n      const interval = setInterval(() => {\n        const duration = Math.floor((Date.now() - lastOnlineTime.getTime()) / 1000);\n        setOfflineDuration(duration);\n      }, 1000);\n\n      return () => clearInterval(interval);\n    } else {\n      setOfflineDuration(0);\n    }\n  }, [networkStatus.isOnline, lastOnlineTime]);\n\n  return {\n    ...networkStatus,\n    retryConnection,\n    lastOnlineTime,\n    offlineDuration,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}